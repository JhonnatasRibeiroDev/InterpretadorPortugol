import { EscrevaMesmaLinha, Importar, Leia } from '@designliquido/delegua/declaracoes';
import { InterpretadorComDepuracao } from '@designliquido/delegua/interpretador/interpretador-com-depuracao';
import { DeleguaModulo } from '@designliquido/delegua/estruturas';
import { Matriz } from '../construtos/matriz';
import { VisitantePortugolStudioInterface } from '../interfaces';
import { Limpa } from '../construtos';
export declare class InterpretadorPortugolStudioComDepuracao extends InterpretadorComDepuracao implements VisitantePortugolStudioInterface {
    mensagemPrompt: string;
    funcaoLimpa: Function;
    constructor(diretorioBase: string, funcaoDeRetorno?: Function, funcaoDeRetornoMesmaLinha?: Function, funcaoLimpa?: Function);
    visitarExpressaoLimpa(expressao: Limpa): Promise<any>;
    /**
     * Execução de uma escrita na saída padrão, sem quebras de linha, e sem remoção de espaços ao final.
     * @param declaracao A declaração.
     * @returns Sempre nulo, por convenção de visita.
     */
    visitarDeclaracaoEscrevaMesmaLinha(declaracao: EscrevaMesmaLinha): Promise<any>;
    visitarDeclaracaoImportar(declaracao: Importar): Promise<DeleguaModulo>;
    /**
     * Execução da leitura de valores da entrada configurada no
     * início da aplicação.
     * @param expressao Expressão do tipo Leia
     * @returns Promise com o resultado da leitura.
     */
    visitarExpressaoLeia(expressao: Leia): Promise<any>;
    visitarExpressaoMatriz(expressao: Matriz): Promise<any>;
    /**
     * No Portugol Studio, como o bloco de execução da função `inicio` é criado
     * pelo avaliador sintático, precisamos ter uma forma aqui de avançar o
     * primeiro bloco pós execução de comando, seja ele qual for.
     */
    private avancarPrimeiroEscopoAposInstrucao;
    instrucaoContinuarInterpretacao(escopo?: number): Promise<any>;
    instrucaoPasso(escopo?: number): Promise<any>;
}
//# sourceMappingURL=interpretador-portugol-studio-com-depuracao.d.ts.map