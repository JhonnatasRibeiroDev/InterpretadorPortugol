"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cadeia_e_inteiro = cadeia_e_inteiro;
exports.cadeia_e_real = cadeia_e_real;
exports.cadeia_e_logico = cadeia_e_logico;
exports.cadeia_e_caracter = cadeia_e_caracter;
exports.cadeia_para_caracter = cadeia_para_caracter;
exports.cadeia_para_inteiro = cadeia_para_inteiro;
exports.cadeia_para_real = cadeia_para_real;
exports.cadeia_para_logico = cadeia_para_logico;
exports.inteiro_e_caracter = inteiro_e_caracter;
exports.inteiro_para_cadeia = inteiro_para_cadeia;
exports.inteiro_para_caracter = inteiro_para_caracter;
exports.inteiro_para_logico = inteiro_para_logico;
exports.inteiro_para_real = inteiro_para_real;
exports.caracter_e_inteiro = caracter_e_inteiro;
exports.caracter_e_logico = caracter_e_logico;
exports.caracter_para_cadeia = caracter_para_cadeia;
exports.caracter_para_inteiro = caracter_para_inteiro;
exports.caracter_para_logico = caracter_para_logico;
exports.logico_para_cadeia = logico_para_cadeia;
exports.logico_para_inteiro = logico_para_inteiro;
exports.logico_para_caracter = logico_para_caracter;
exports.real_para_inteiro = real_para_inteiro;
const PADRAO_INTEIRO_NOTACAO_HEXADECIMAL = /^(0x|0X)?([0-9]|[a-f]|[A-F])+$/;
const PADRAO_INTEIRO_NOTACAO_BINARIA = /^(0b|0B)?[0-1]+$/;
const PADRAO_INTEIRO_NOTACAO_DECIMAL = /^-?\d+$/;
const PADRAO_REAL = /^-?\d+\.\d+$/;
const PADRAO_LOGICO = /^verdadeiro|falso$/;
function cadeia_e_inteiro(interpretador, cad, base) {
    switch (base) {
        case 2:
            return PADRAO_INTEIRO_NOTACAO_BINARIA.test(cad);
        case 10:
            return PADRAO_INTEIRO_NOTACAO_DECIMAL.test(cad);
        case 16:
            return PADRAO_INTEIRO_NOTACAO_HEXADECIMAL.test(cad);
        default:
            throw new Error(`A base informada (${base}) é inválida. A base deve ser um dos seguintes valores: 2; 10; 16.`);
    }
}
function cadeia_e_real(interpretador, cad) {
    return PADRAO_REAL.test(cad);
}
function cadeia_e_logico(interpretador, cad) {
    return PADRAO_LOGICO.test(cad);
}
function cadeia_e_caracter(interpretador, cad) {
    return cad.length === 1;
}
function cadeia_para_caracter(interpretador, valor) {
    if (valor.length === 1) {
        return valor.charAt(0);
    }
    throw new Error(`O valor '${valor}' não é um caractere válido`);
}
function cadeia_para_inteiro(interpretador, valor, base) {
    if (base === 2 || base === 10 || base === 16) {
        if (base === 16) {
            valor = valor.replace(/^0x/i, '');
        }
        if (base === 2) {
            valor = valor.replace(/^0b/i, '');
        }
        const val = parseInt(valor, base);
        if (isNaN(val)) {
            throw new Error(`O valor '${valor}' não é um número inteiro válido`);
        }
        if (val >= 2147483648) {
            return val - (1 << 32);
        }
        return val;
    }
    throw new Error(`A base informada (${base}) é inválida. A base deve ser um dos seguintes valores: 2; 10; 16`);
}
function cadeia_para_real(interpretador, valor) {
    if (!isNaN(parseFloat(valor))) {
        return parseFloat(valor);
    }
    throw new Error(`O valor '${valor}' não é um número real válido`);
}
function cadeia_para_logico(interpretador, valor) {
    switch (valor.toLowerCase()) {
        case 'verdadeiro':
            return true;
        case 'falso':
            return false;
        default:
            throw new Error(`O valor '${valor}' não é um valor lógico válido`);
    }
}
function inteiro_e_caracter(interpretador, _int) {
    return _int >= 0 && _int <= 9;
}
function inteiro_para_cadeia(interpretador, valor, base) {
    if (cadeia_e_inteiro(interpretador, valor.toString(), base)) {
        if (base === 2 || base === 10 || base === 16) {
            switch (base) {
                case 2:
                    return lpad(32, valor.toString(2));
                case 10:
                    return valor.toString();
                case 16:
                    return lpad(8, valor.toString(16).toUpperCase());
                default:
                    throw new Error(`A base informada (${base}) é inválida. A base deve ser um dos seguintes valores: 2; 10; 16`);
            }
        }
    }
    throw new Error(`O valor '${valor}' não é um número inteiro válido`);
}
function inteiro_para_caracter(interpretador, valor) {
    if (valor >= 0 && valor <= 9) {
        return String(valor);
    }
    throw new Error(`O valor '${valor}' não é um caractere válido`);
}
function inteiro_para_logico(interpretador, valor) {
    return valor > 0;
}
function inteiro_para_real(interpretador, valor) {
    return valor;
}
function caracter_e_inteiro(interpretador, car) {
    return cadeia_e_inteiro(interpretador, car, 10);
}
function caracter_e_logico(interpretador, car) {
    return car.toLowerCase() === 's' || car.toLowerCase() === 'n';
}
function caracter_para_cadeia(interpretador, valor) {
    return valor;
}
function caracter_para_inteiro(interpretador, valor) {
    return cadeia_para_inteiro(interpretador, valor, 10);
}
function caracter_para_logico(interpretador, valor) {
    if (valor.toLowerCase() === 's') {
        return true;
    }
    if (valor.toLowerCase() === 'n') {
        return false;
    }
    throw new Error(`O valor '${valor}' não é um valor lógico válido`);
}
function logico_para_cadeia(interpretador, valor) {
    return valor ? 'verdadeiro' : 'falso';
}
function logico_para_inteiro(interpretador, valor) {
    return valor ? 1 : 0;
}
function logico_para_caracter(interpretador, valor) {
    return valor ? 'S' : 'N';
}
function real_para_inteiro(interpretador, valor) {
    return Math.floor(valor);
}
function lpad(quantidade, cadeia) {
    if (cadeia.length < quantidade) {
        const diferenca = quantidade - cadeia.length;
        return '0'.repeat(diferenca) + cadeia;
    }
    return cadeia;
}
//# sourceMappingURL=tipos.js.map