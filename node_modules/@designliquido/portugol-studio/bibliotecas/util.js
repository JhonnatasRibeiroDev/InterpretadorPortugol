"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.obter_diretorio_usuario = obter_diretorio_usuario;
exports.numero_elementos = numero_elementos;
exports.numero_linhas = numero_linhas;
exports.numero_colunas = numero_colunas;
exports.sorteia = sorteia;
exports.aguarde = aguarde;
exports.tempo_decorrido = tempo_decorrido;
const os = __importStar(require("os"));
const horaInicial = Date.now();
async function obter_diretorio_usuario() {
    try {
        return os.homedir();
    }
    catch (error) {
        throw new Error('Não foi possível obter o diretório do usuário');
    }
}
async function numero_elementos(interpretador, vetor) {
    return vetor.length;
}
async function numero_linhas(interpretador, matriz) {
    return matriz.length;
}
async function numero_colunas(interpretador, matriz) {
    return matriz[0].length;
}
async function sorteia(interpretador, minimo, maximo) {
    if (minimo > maximo) {
        throw new Error(`O valor mínimo (${minimo}) é maior do que o valor máximo (${maximo})`);
    }
    if (minimo === maximo) {
        throw new Error(`Os valores mínimo e máximo são iguais: ${minimo}`);
    }
    return Math.floor(Math.random() * (maximo + 1 - minimo)) + minimo;
}
async function aguarde(interpretador, intervalo) {
    await new Promise((resolve) => setTimeout(resolve, intervalo));
}
async function tempo_decorrido() {
    const tempoAtual = Date.now();
    return Math.floor(tempoAtual - horaInicial);
}
//# sourceMappingURL=util.js.map