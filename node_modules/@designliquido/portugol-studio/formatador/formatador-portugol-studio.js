"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatadorPortugolStudio = void 0;
const declaracoes_1 = require("@designliquido/delegua/declaracoes");
const construtos_1 = require("@designliquido/delegua/construtos");
const lexico_regular_1 = __importDefault(require("../tipos-de-simbolos/lexico-regular"));
class FormatadorPortugolStudio {
    constructor(quebraLinha, tamanhoIndentacao = 4) {
        this.quebraLinha = quebraLinha;
        this.tamanhoIndentacao = tamanhoIndentacao;
        this.indentacaoAtual = 0;
        this.codigoFormatado = '';
        this.devePularLinha = true;
        this.deveIndentar = true;
    }
    visitarExpressaoArgumentoReferenciaFuncao(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoReferenciaFuncao(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoAcessoMetodoOuPropriedade(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoAcessoPropriedade(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoComentario(declaracao) {
        if (declaracao.multilinha) {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}/`;
            for (let linhaConteudo of declaracao.conteudo) {
                this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}* ${linhaConteudo.replace(/\s+/g, ' ')}${this.quebraLinha}`;
            }
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)} */${this.quebraLinha}`;
        }
        else {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}// `;
            this.codigoFormatado += declaracao.conteudo.replace(/\s+/g, ' ');
            this.codigoFormatado += `${this.quebraLinha}`;
        }
    }
    visitarDeclaracaoTendoComo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoInicioAlgoritmo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoCabecalhoPrograma(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoTupla(expressao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoClasse(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoConst(declaracao) {
        if (declaracao.inicializador) {
            if (declaracao.inicializador instanceof declaracoes_1.Importar) {
                this.visitarDeclaracaoImportar(declaracao.inicializador, declaracao.simbolo.lexema);
            }
            else {
                this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}const ${declaracao.tipo} ${declaracao.simbolo.lexema}`;
                this.codigoFormatado += ` = `;
                this.formatarDeclaracaoOuConstruto(declaracao.inicializador);
            }
        }
        if (this.devePularLinha) {
            this.codigoFormatado += this.quebraLinha;
        }
    }
    visitarDeclaracaoConstMultiplo(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeAtribuicao(expressao) {
        if (expressao.valor instanceof construtos_1.Binario &&
            [
                lexico_regular_1.default.MAIS_IGUAL,
                lexico_regular_1.default.MENOS_IGUAL,
                lexico_regular_1.default.MULTIPLICACAO_IGUAL,
                lexico_regular_1.default.DIVISAO_IGUAL,
            ].includes(expressao.valor.operador.tipo)) {
            this.visitarExpressaoBinaria(expressao.valor);
        }
        else {
            const alvo = this.formatarDeclaracaoOuConstruto(expressao.alvo);
            this.codigoFormatado += `${alvo} = `;
            this.formatarDeclaracaoOuConstruto(expressao.valor);
        }
        if (this.devePularLinha) {
            this.codigoFormatado += `${this.quebraLinha}`;
        }
    }
    visitarDeclaracaoDeExpressao(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}`;
        this.formatarDeclaracaoOuConstruto(declaracao.expressao);
    }
    visitarDeclaracaoAleatorio(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoDefinicaoFuncao(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}funcao ${declaracao.simbolo.lexema}()${this.quebraLinha}`;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}{${this.quebraLinha}`;
        this.visitarExpressaoFuncaoConstruto(declaracao.funcao);
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
    }
    visitarDeclaracaoEnquanto(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}enquanto( `;
        this.formatarDeclaracaoOuConstruto(declaracao.condicao);
        this.codigoFormatado += ` ) {`;
        this.codigoFormatado += this.quebraLinha;
        this.formatarDeclaracaoOuConstruto(declaracao.corpo);
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
    }
    visitarDeclaracaoEscolha(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}escolha `;
        this.formatarDeclaracaoOuConstruto(declaracao.identificadorOuLiteral);
        this.codigoFormatado += ` {${this.quebraLinha}`;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let caminho of declaracao.caminhos) {
            for (let declaracoes of caminho.condicoes) {
                this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}caso `;
                this.formatarDeclaracaoOuConstruto(declaracoes);
                this.codigoFormatado += ':';
                this.codigoFormatado += this.quebraLinha;
            }
            for (let declaracoes of caminho.declaracoes) {
                this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}`;
                this.formatarDeclaracaoOuConstruto(declaracoes);
            }
        }
        for (let padrao of declaracao.caminhoPadrao.declaracoes) {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}caso contrario:`;
            this.codigoFormatado += this.quebraLinha;
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}`;
            this.formatarDeclaracaoOuConstruto(padrao);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
    }
    visitarDeclaracaoEscreva(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}escreva(`;
        for (let argumento of declaracao.argumentos) {
            this.formatarDeclaracaoOuConstruto(argumento);
        }
        this.codigoFormatado += `)${this.quebraLinha}`;
    }
    visitarDeclaracaoEscrevaMesmaLinha(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}escreva(`;
        for (let argumento of declaracao.argumentos) {
            const argumentoTratado = argumento;
            this.formatarDeclaracaoOuConstruto(argumentoTratado);
            this.codigoFormatado += ', ';
        }
        if (declaracao.argumentos.length && this.codigoFormatado[this.codigoFormatado.length - 2] === ',') {
            this.codigoFormatado = this.codigoFormatado.slice(0, -2);
        }
        this.codigoFormatado += `)${this.quebraLinha}`;
    }
    visitarDeclaracaoFazer(declaracao) {
        this.codigoFormatado += `${this.quebraLinha}${' '.repeat(this.indentacaoAtual)}faca${this.quebraLinha}`;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}{${this.quebraLinha}`;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoBloco of declaracao.caminhoFazer.declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracaoBloco);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}enquanto (`;
        this.devePularLinha = false;
        this.formatarDeclaracaoOuConstruto(declaracao.condicaoEnquanto);
        this.codigoFormatado += `)${this.quebraLinha}`;
        this.devePularLinha = true;
    }
    visitarDeclaracaoImportar(declaracao, nomeConstante) {
        // O caminho vem como um literal, mas na verdade não é bem um literal.
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}inclua biblioteca ${declaracao.caminho.valor}`;
        if (nomeConstante && nomeConstante.length > 0) {
            this.codigoFormatado += ` --> ${nomeConstante}`;
        }
    }
    visitarDeclaracaoPara(declaracao) {
        this.codigoFormatado += `${this.quebraLinha}${' '.repeat(this.indentacaoAtual)}para (`;
        this.devePularLinha = false;
        if (declaracao.inicializador) {
            this.deveIndentar = false;
            if (Array.isArray(declaracao.inicializador)) {
                for (let declaracaoInicializador of declaracao.inicializador) {
                    this.formatarDeclaracaoOuConstruto(declaracaoInicializador);
                }
            }
            else {
                this.formatarDeclaracaoOuConstruto(declaracao.inicializador);
            }
            this.deveIndentar = true;
        }
        this.codigoFormatado += `; `;
        this.formatarDeclaracaoOuConstruto(declaracao.condicao);
        this.codigoFormatado += `; `;
        this.formatarDeclaracaoOuConstruto(declaracao.incrementar);
        this.devePularLinha = true;
        this.codigoFormatado += `)${this.quebraLinha}`;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}{${this.quebraLinha}`;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoBloco of declaracao.corpo.declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracaoBloco);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
    }
    visitarDeclaracaoParaCada(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoSe(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}se (`;
        this.formatarDeclaracaoOuConstruto(declaracao.condicao);
        this.codigoFormatado += ` ) {${this.quebraLinha}`;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoBloco of declaracao.caminhoEntao.declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracaoBloco);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        if (declaracao.caminhoSenao) {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}} senao {${this.quebraLinha}`;
            this.formatarDeclaracaoOuConstruto(declaracao.caminhoSenao);
        }
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}}${this.quebraLinha}`;
    }
    visitarDeclaracaoTente(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarDeclaracaoVar(declaracao) {
        if (declaracao.tipo) {
            let tipoDado;
            switch (declaracao.tipo) {
                case 'inteiro[]':
                    tipoDado = 'inteiro';
                    break;
                case 'texto[]':
                case 'caracter[]':
                    tipoDado = 'caracter';
                    break;
                case 'lógico':
                    tipoDado = 'logico';
                    break;
                default:
                    tipoDado = declaracao.tipo;
                    break;
            }
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}${tipoDado} ${declaracao.simbolo.lexema}`;
            if (declaracao.inicializador) {
                if (declaracao.inicializador instanceof construtos_1.Vetor) {
                    this.codigoFormatado += `[${declaracao.inicializador.valores.length}]`;
                }
                this.codigoFormatado += ` = `;
                this.formatarDeclaracaoOuConstruto(declaracao.inicializador);
                if (this.devePularLinha) {
                    this.codigoFormatado += this.quebraLinha;
                }
            }
        }
        else {
            this.codigoFormatado += `${declaracao.simbolo.lexema} = `;
            this.formatarDeclaracaoOuConstruto(declaracao.inicializador);
        }
    }
    visitarDeclaracaoVarMultiplo(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAcessoIndiceVariavel(expressao) {
        this.formatarDeclaracaoOuConstruto(expressao.entidadeChamada);
        this.codigoFormatado += `[`;
        this.formatarDeclaracaoOuConstruto(expressao.indice);
        this.codigoFormatado += `]`;
    }
    visitarExpressaoAcessoElementoMatriz(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAcessoMetodo(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoAgrupamento(expressao) {
        this.codigoFormatado += '(';
        this.formatarDeclaracaoOuConstruto(expressao.expressao);
        this.codigoFormatado += ')';
    }
    visitarExpressaoAtribuicaoPorIndice(expressao) {
        this.formatarDeclaracaoOuConstruto(expressao.objeto);
        this.codigoFormatado += '[';
        this.formatarDeclaracaoOuConstruto(expressao.indice);
        this.codigoFormatado += '] = ';
        this.formatarDeclaracaoOuConstruto(expressao.valor);
        this.codigoFormatado += this.quebraLinha;
    }
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoBinaria(expressao) {
        this.formatarDeclaracaoOuConstruto(expressao.esquerda);
        switch (expressao.operador.tipo) {
            case lexico_regular_1.default.ADICAO:
                this.codigoFormatado += ' + ';
                break;
            case lexico_regular_1.default.DIVISAO:
                this.codigoFormatado += ' / ';
                break;
            case lexico_regular_1.default.DIVISAO_INTEIRA:
                this.codigoFormatado += '  ';
                break;
            case lexico_regular_1.default.IGUAL:
                this.codigoFormatado += ' = ';
                break;
            case lexico_regular_1.default.IGUAL_IGUAL:
                this.codigoFormatado += ' == ';
                break;
            case lexico_regular_1.default.MAIOR:
                this.codigoFormatado += ' > ';
                break;
            case lexico_regular_1.default.MAIOR_IGUAL:
                this.codigoFormatado += ' >= ';
                break;
            case lexico_regular_1.default.MENOR:
                this.codigoFormatado += ' < ';
                break;
            case lexico_regular_1.default.MENOR_IGUAL:
                this.codigoFormatado += ' <= ';
                break;
            case lexico_regular_1.default.SUBTRACAO:
                this.codigoFormatado += ` - `;
                break;
            case lexico_regular_1.default.MULTIPLICACAO:
                this.codigoFormatado += ` * `;
                break;
            case lexico_regular_1.default.MODULO:
                this.codigoFormatado += ` % `;
                break;
            default:
                console.log(expressao.operador.tipo);
                break;
        }
        this.formatarDeclaracaoOuConstruto(expressao.direita);
    }
    visitarExpressaoBloco(declaracao) {
        this.formatarBlocoOuVetorDeclaracoes(declaracao.declaracoes);
    }
    visitarExpressaoContinua(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeChamada(expressao) {
        /*         console.log(expressao);
         */
    }
    visitarExpressaoDefinirValor(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeleguaFuncao(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoDeVariavel(expressao) {
        this.codigoFormatado += `${expressao.simbolo.lexema}`;
    }
    visitarExpressaoDicionario(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoExpressaoRegular(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFalhar(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFimPara(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFormatacaoEscrita(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoFuncaoConstruto(expressao) {
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoCorpo of expressao.corpo) {
            this.formatarDeclaracaoOuConstruto(declaracaoCorpo);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
    }
    visitarExpressaoIsto(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoLeia(expressao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}leia(`;
        for (let argumento of expressao.argumentos) {
            this.formatarDeclaracaoOuConstruto(argumento);
            this.codigoFormatado += `, `;
        }
        if (expressao.argumentos.length > 0) {
            this.codigoFormatado = this.codigoFormatado.slice(0, -2);
        }
        this.codigoFormatado += `)${this.quebraLinha}`;
    }
    visitarExpressaoLiteral(expressao) {
        if (typeof expressao.valor === 'string') {
            this.codigoFormatado += `"${expressao.valor}"`;
            return;
        }
        if (typeof expressao.valor === 'boolean') {
            switch (expressao.valor) {
                case true:
                    this.codigoFormatado += 'verdadeiro';
                    break;
                default:
                    this.codigoFormatado += 'falso';
                    break;
            }
            return;
        }
        this.codigoFormatado += `${expressao.valor}`;
    }
    visitarExpressaoLogica(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoRetornar(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}retorne`;
        if (declaracao.valor) {
            this.codigoFormatado += ` `;
            this.formatarDeclaracaoOuConstruto(declaracao.valor);
        }
        this.codigoFormatado += `${this.quebraLinha}`;
    }
    visitarExpressaoSuper(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoSustar(declaracao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoTipoDe(expressao) {
        throw new Error('Método não implementado');
    }
    visitarExpressaoUnaria(expressao) {
        let operador;
        switch (expressao.operador.tipo) {
            case lexico_regular_1.default.INCREMENTAR:
                operador = `++`;
                break;
            case lexico_regular_1.default.DECREMENTAR:
                operador = `--`;
                break;
            case lexico_regular_1.default.NEGACAO:
                operador = 'nao ';
                break;
            default:
                console.log(expressao.operador.tipo);
                break;
        }
        switch (expressao.incidenciaOperador) {
            case 'ANTES':
                this.codigoFormatado += operador;
                this.formatarDeclaracaoOuConstruto(expressao.operando);
                break;
            case 'DEPOIS':
                this.formatarDeclaracaoOuConstruto(expressao.operando);
                this.codigoFormatado += operador;
                break;
        }
        if (this.devePularLinha) {
            this.codigoFormatado += this.quebraLinha;
        }
    }
    visitarExpressaoVetor(expressao) {
        this.codigoFormatado += '[';
        for (let valor of expressao.valores) {
            this.formatarDeclaracaoOuConstruto(valor);
            this.codigoFormatado += ', ';
        }
        if (expressao.valores.length > 0) {
            this.codigoFormatado = this.codigoFormatado.slice(0, -2);
        }
        this.codigoFormatado += `]`;
    }
    formatarDeclaracaoOuConstruto(declaracaoOuConstruto) {
        switch (declaracaoOuConstruto.constructor.name) {
            case 'AcessoIndiceVariavel':
                this.visitarExpressaoAcessoIndiceVariavel(declaracaoOuConstruto);
                break;
            case 'AcessoMetodoOuPropriedade':
                this.visitarExpressaoAcessoMetodo(declaracaoOuConstruto);
                break;
            case 'Agrupamento':
                this.visitarExpressaoAgrupamento(declaracaoOuConstruto);
                break;
            case 'AtribuicaoPorIndice':
                this.visitarExpressaoAtribuicaoPorIndice(declaracaoOuConstruto);
                break;
            case 'Atribuir':
                this.visitarExpressaoDeAtribuicao(declaracaoOuConstruto);
                break;
            case 'Binario':
                this.visitarExpressaoBinaria(declaracaoOuConstruto);
                break;
            case 'Bloco':
                this.visitarExpressaoBloco(declaracaoOuConstruto);
                break;
            case 'Chamada':
                this.visitarExpressaoDeChamada(declaracaoOuConstruto);
                break;
            case 'Classe':
                this.visitarDeclaracaoClasse(declaracaoOuConstruto);
                break;
            case 'Comentario':
                this.visitarDeclaracaoComentario(declaracaoOuConstruto);
                break;
            case 'Continua':
                this.visitarExpressaoContinua(declaracaoOuConstruto);
                break;
            case 'DefinirValor':
                this.visitarExpressaoDefinirValor(declaracaoOuConstruto);
                break;
            case 'Dicionario':
                this.visitarExpressaoDicionario(declaracaoOuConstruto);
                break;
            case 'Escolha':
                this.visitarDeclaracaoEscolha(declaracaoOuConstruto);
                break;
            case 'Enquanto':
                this.visitarDeclaracaoEnquanto(declaracaoOuConstruto);
                break;
            case 'Escreva':
                this.visitarDeclaracaoEscreva(declaracaoOuConstruto);
                break;
            case 'EscrevaMesmaLinha':
                this.visitarDeclaracaoEscrevaMesmaLinha(declaracaoOuConstruto);
                break;
            case 'Expressao':
                this.visitarDeclaracaoDeExpressao(declaracaoOuConstruto);
                break;
            case 'ExpressaoRegular':
                this.visitarExpressaoExpressaoRegular(declaracaoOuConstruto);
                break;
            case 'Falhar':
                this.visitarExpressaoFalhar(declaracaoOuConstruto);
                break;
            case 'Fazer':
                this.visitarDeclaracaoFazer(declaracaoOuConstruto);
                break;
            case 'FuncaoConstruto':
                this.visitarExpressaoFuncaoConstruto(declaracaoOuConstruto);
                break;
            case 'FuncaoDeclaracao':
                this.visitarDeclaracaoDefinicaoFuncao(declaracaoOuConstruto);
                break;
            case 'Importar':
                this.visitarDeclaracaoImportar(declaracaoOuConstruto);
                break;
            case 'Isto':
                this.visitarExpressaoIsto(declaracaoOuConstruto);
                break;
            case 'Leia':
                this.visitarExpressaoLeia(declaracaoOuConstruto);
                break;
            case 'Literal':
                this.visitarExpressaoLiteral(declaracaoOuConstruto);
                break;
            case 'Logico':
                this.visitarExpressaoLogica(declaracaoOuConstruto);
                break;
            case 'Para':
                this.visitarDeclaracaoPara(declaracaoOuConstruto);
                break;
            case 'ParaCada':
                this.visitarDeclaracaoParaCada(declaracaoOuConstruto);
                break;
            case 'Retorna':
                this.visitarExpressaoRetornar(declaracaoOuConstruto);
                break;
            case 'Se':
                this.visitarDeclaracaoSe(declaracaoOuConstruto);
                break;
            case 'Super':
                this.visitarExpressaoSuper(declaracaoOuConstruto);
                break;
            case 'Sustar':
                this.visitarExpressaoSustar(declaracaoOuConstruto);
                break;
            case 'Tente':
                this.visitarDeclaracaoTente(declaracaoOuConstruto);
                break;
            case 'TipoDe':
                this.visitarExpressaoTipoDe(declaracaoOuConstruto);
                break;
            case 'Unario':
                this.visitarExpressaoUnaria(declaracaoOuConstruto);
                break;
            case 'Const':
                this.visitarDeclaracaoConst(declaracaoOuConstruto);
                break;
            case 'Var':
                this.visitarDeclaracaoVar(declaracaoOuConstruto);
                break;
            case 'Variavel':
                this.visitarExpressaoDeVariavel(declaracaoOuConstruto);
                break;
            case 'Vetor':
                this.visitarExpressaoVetor(declaracaoOuConstruto);
                break;
            default:
                console.log(declaracaoOuConstruto.constructor.name);
                break;
        }
    }
    formatarBlocoOuVetorDeclaracoes(declaracoes) {
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoBloco of declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracaoBloco);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
    }
    formatar(declaracoes) {
        this.indentacaoAtual = 0;
        this.codigoFormatado = '';
        // Comentários podem vir antes da declaração do programa.
        while (declaracoes[0] instanceof construtos_1.Comentario) {
            const comentario = declaracoes.shift();
            this.visitarDeclaracaoComentario(comentario);
        }
        // O avaliador sintático devolve uma última declaração `Expressao`
        // que é simplemente uma chamada à função `inicio()`, mas que é
        // irrelevante aqui. Então simplesmente a descartamos.
        declaracoes.pop();
        this.codigoFormatado += `programa ${this.quebraLinha}{${this.quebraLinha}`;
        this.devePularLinha = true;
        this.deveIndentar = true;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracao of declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracao);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `}${this.quebraLinha}`;
        return this.codigoFormatado;
    }
}
exports.FormatadorPortugolStudio = FormatadorPortugolStudio;
//# sourceMappingURL=formatador-portugol-studio.js.map