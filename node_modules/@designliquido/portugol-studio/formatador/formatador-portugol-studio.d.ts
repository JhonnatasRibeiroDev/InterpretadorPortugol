import { VisitanteComumInterface } from '@designliquido/delegua/interfaces';
import { Aleatorio, Bloco, CabecalhoPrograma, Classe, Const, ConstMultiplo, Continua, Declaracao, Enquanto, Escolha, Escreva, EscrevaMesmaLinha, Expressao, Fazer, FuncaoDeclaracao, Importar, InicioAlgoritmo, Leia, Para, ParaCada, Retorna, Se, Sustar, TendoComo, Tente, Var, VarMultiplo } from '@designliquido/delegua/declaracoes';
import { AcessoIndiceVariavel, AcessoMetodoOuPropriedade, AcessoPropriedade, Agrupamento, ArgumentoReferenciaFuncao, AtribuicaoPorIndice, Atribuir, Binario, Comentario, Construto, ExpressaoRegular, FimPara, FormatacaoEscrita, FuncaoConstruto, Literal, ReferenciaFuncao, Super, TipoDe, Tupla, Unario, Variavel, Vetor } from '@designliquido/delegua/construtos';
import { ContinuarQuebra, SustarQuebra } from '@designliquido/delegua/quebras';
export declare class FormatadorPortugolStudio implements VisitanteComumInterface {
    indentacaoAtual: number;
    quebraLinha: string;
    tamanhoIndentacao: number;
    codigoFormatado: string;
    devePularLinha: boolean;
    deveIndentar: boolean;
    constructor(quebraLinha: string, tamanhoIndentacao?: number);
    visitarExpressaoArgumentoReferenciaFuncao(expressao: ArgumentoReferenciaFuncao): Promise<any> | void;
    visitarExpressaoReferenciaFuncao(expressao: ReferenciaFuncao): Promise<any> | void;
    visitarExpressaoAcessoMetodoOuPropriedade(expressao: AcessoMetodoOuPropriedade): Promise<any> | void;
    visitarExpressaoAcessoPropriedade(expressao: AcessoPropriedade): Promise<any> | void;
    visitarDeclaracaoComentario(declaracao: Comentario): void | Promise<any>;
    visitarDeclaracaoTendoComo(declaracao: TendoComo): void | Promise<any>;
    visitarDeclaracaoInicioAlgoritmo(declaracao: InicioAlgoritmo): Promise<any>;
    visitarDeclaracaoCabecalhoPrograma(declaracao: CabecalhoPrograma): Promise<any>;
    visitarExpressaoTupla(expressao: Tupla): Promise<any>;
    visitarDeclaracaoClasse(declaracao: Classe): void;
    visitarDeclaracaoConst(declaracao: Const): any;
    visitarDeclaracaoConstMultiplo(declaracao: ConstMultiplo): Promise<any>;
    visitarExpressaoDeAtribuicao(expressao: Atribuir): void;
    visitarDeclaracaoDeExpressao(declaracao: Expressao): void;
    visitarDeclaracaoAleatorio(declaracao: Aleatorio): Promise<any>;
    visitarDeclaracaoDefinicaoFuncao(declaracao: FuncaoDeclaracao): void;
    visitarDeclaracaoEnquanto(declaracao: Enquanto): void;
    visitarDeclaracaoEscolha(declaracao: Escolha): void;
    visitarDeclaracaoEscreva(declaracao: Escreva): void;
    visitarDeclaracaoEscrevaMesmaLinha(declaracao: EscrevaMesmaLinha): void;
    visitarDeclaracaoFazer(declaracao: Fazer): void;
    visitarDeclaracaoImportar(declaracao: Importar, nomeConstante?: string): void;
    visitarDeclaracaoPara(declaracao: Para): any;
    visitarDeclaracaoParaCada(declaracao: ParaCada): Promise<any>;
    visitarDeclaracaoSe(declaracao: Se): void;
    visitarDeclaracaoTente(declaracao: Tente): void;
    visitarDeclaracaoVar(declaracao: Var): any;
    visitarDeclaracaoVarMultiplo(declaracao: VarMultiplo): Promise<any>;
    visitarExpressaoAcessoIndiceVariavel(expressao: AcessoIndiceVariavel): void;
    visitarExpressaoAcessoElementoMatriz(expressao: any): void;
    visitarExpressaoAcessoMetodo(expressao: any): void;
    visitarExpressaoAgrupamento(expressao: Agrupamento): any;
    visitarExpressaoAtribuicaoPorIndice(expressao: AtribuicaoPorIndice): any;
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao: any): Promise<any>;
    visitarExpressaoBinaria(expressao: Binario): void;
    visitarExpressaoBloco(declaracao: Bloco): any;
    visitarExpressaoContinua(declaracao?: Continua): ContinuarQuebra;
    visitarExpressaoDeChamada(expressao: any): void;
    visitarExpressaoDefinirValor(expressao: any): void;
    visitarExpressaoDeleguaFuncao(expressao: any): void;
    visitarExpressaoDeVariavel(expressao: Variavel): void;
    visitarExpressaoDicionario(expressao: any): void;
    visitarExpressaoExpressaoRegular(expressao: ExpressaoRegular): Promise<RegExp>;
    visitarExpressaoFalhar(expressao: any): Promise<any>;
    visitarExpressaoFimPara(declaracao: FimPara): void;
    visitarExpressaoFormatacaoEscrita(declaracao: FormatacaoEscrita): void;
    visitarExpressaoFuncaoConstruto(expressao: FuncaoConstruto): void;
    visitarExpressaoIsto(expressao: any): void;
    visitarExpressaoLeia(expressao: Leia): any;
    visitarExpressaoLiteral(expressao: Literal): any;
    visitarExpressaoLogica(expressao: any): void;
    visitarExpressaoRetornar(declaracao: Retorna): any;
    visitarExpressaoSuper(expressao: Super): void;
    visitarExpressaoSustar(declaracao?: Sustar): SustarQuebra;
    visitarExpressaoTipoDe(expressao: TipoDe): Promise<any>;
    visitarExpressaoUnaria(expressao: Unario): void;
    visitarExpressaoVetor(expressao: Vetor): void;
    formatarDeclaracaoOuConstruto(declaracaoOuConstruto: Declaracao | Construto): void;
    private formatarBlocoOuVetorDeclaracoes;
    formatar(declaracoes: Declaracao[]): string;
}
//# sourceMappingURL=formatador-portugol-studio.d.ts.map