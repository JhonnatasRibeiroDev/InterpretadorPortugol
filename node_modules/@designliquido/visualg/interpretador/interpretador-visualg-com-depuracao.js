"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpretadorVisuAlgComDepuracao = void 0;
const _ = __importStar(require("lodash"));
const quebras_1 = require("@designliquido/delegua/quebras");
const interpretador_com_depuracao_1 = require("@designliquido/delegua/interpretador/interpretador-com-depuracao");
const comum_1 = require("./comum");
const pilha_escopos_execucao_visualg_1 = require("./pilha-escopos-execucao-visualg");
const comum = __importStar(require("./comum"));
/**
 * Interpretador com depuração para o dialeto VisuAlg.
 */
class InterpretadorVisuAlgComDepuracao extends interpretador_com_depuracao_1.InterpretadorComDepuracao {
    constructor(diretorioBase, funcaoDeRetorno = null, funcaoDeRetornoMesmaLinha = null, funcaoLimpaTela = null) {
        super(diretorioBase, funcaoDeRetorno, funcaoDeRetornoMesmaLinha);
        this.funcaoLimpaTela = () => {
            console.log('Função "limpa()" não está ligada a uma interface de entrada e saída.');
        };
        if (funcaoLimpaTela !== null) {
            this.funcaoLimpaTela = funcaoLimpaTela;
        }
        this.pilhaEscoposExecucao = new pilha_escopos_execucao_visualg_1.PilhaEscoposExecucaoVisuAlg();
        this.mensagemPrompt = '> ';
        // Por padrão, a escrita de prompt fica desabilitada.
        // Se precisar escrever no prompt (por exemplo, em uma aplicação web usando `window.prompt`),
        // basta reabilitar este parâmetro.
        this.deveEscreverPrompt = false;
        this.tiposConhecidos = [];
        (0, comum_1.carregarBibliotecaGlobalCaracter)(this.pilhaEscoposExecucao);
        (0, comum_1.carregarBibliotecaGlobalNumerica)(this.pilhaEscoposExecucao);
    }
    async visitarExpressaoLimpaTela(expressao) {
        this.funcaoLimpaTela();
        return Promise.resolve();
    }
    async visitarDeclaracaoInicioAlgoritmo(declaracao) {
        return comum.visitarDeclaracaoInicioAlgoritmo(this, declaracao);
    }
    async visitarDeclaracaoCabecalhoPrograma(declaracao) {
        return comum.visitarDeclaracaoCabecalhoPrograma(this, declaracao);
    }
    async visitarDeclaracaoClasse(declaracao) {
        return comum.visitarDeclaracaoClasse(this, declaracao);
    }
    /**
     * VisuAlg não tem o conceito de declaração de constantes.
     * @param declaracao Uma declaração Const.
     */
    visitarDeclaracaoConst(declaracao) {
        throw new Error('Método não implementado.');
    }
    async visitarDeclaracaoDefinicaoFuncao(declaracao) {
        return comum.visitarDeclaracaoDefinicaoFuncao(this, declaracao);
    }
    async visitarExpressaoAcessoElementoMatriz(expressao) {
        return await comum.visitarExpressaoAcessoElementoMatriz(this, expressao);
    }
    async visitarExpressaoAtribuicaoPorIndicesMatriz(expressao) {
        return await comum.visitarExpressaoAtribuicaoPorIndicesMatriz(this, expressao);
    }
    async avaliarArgumentosEscrevaVisuAlg(argumentos) {
        let formatoTexto = '';
        for (const argumento of argumentos) {
            const resultadoAvaliacao = await this.avaliar(argumento);
            let valor = (resultadoAvaliacao === null || resultadoAvaliacao === void 0 ? void 0 : resultadoAvaliacao.hasOwnProperty('valor')) ? resultadoAvaliacao.valor : resultadoAvaliacao;
            formatoTexto += `${this.paraTexto(valor)}`;
        }
        return formatoTexto;
    }
    /**
     * No VisuAlg, o bloco executa se a condição for falsa.
     * Por isso a reimplementação aqui.
     * @param declaracao A declaração `Fazer`
     * @returns Só retorna em caso de erro na execução, e neste caso, o erro.
     */
    async visitarDeclaracaoFazer(declaracao) {
        let retornoExecucao;
        do {
            try {
                retornoExecucao = await this.executar(declaracao.caminhoFazer);
                if (retornoExecucao instanceof quebras_1.ContinuarQuebra) {
                    retornoExecucao = null;
                }
            }
            catch (erro) {
                return Promise.reject(erro);
            }
        } while (!(retornoExecucao instanceof quebras_1.Quebra) &&
            !this.eVerdadeiro(await this.avaliar(declaracao.condicaoEnquanto)));
    }
    async visitarDeclaracaoVar(declaracao) {
        return comum.visitarDeclaracaoVar(this, declaracao);
    }
    /**
     * Execução de uma escrita na saída padrão, sem quebras de linha.
     * Implementada para alguns dialetos, como VisuAlg.
     *
     * Como `readline.question` sobrescreve o que foi escrito antes, aqui
     * definimos `this.mensagemPrompt` para uso com `leia`.
     * No VisuAlg é muito comum usar `escreva()` seguido de `leia()` para
     * gerar um prompt na mesma linha.
     * @param declaracao A declaração.
     * @returns Sempre nulo, por convenção de visita.
     */
    async visitarDeclaracaoEscrevaMesmaLinha(declaracao) {
        try {
            const formatoTexto = await this.avaliarArgumentosEscrevaVisuAlg(declaracao.argumentos);
            this.mensagemPrompt = formatoTexto;
            this.funcaoDeRetornoMesmaLinha(formatoTexto);
            return null;
        }
        catch (erro) {
            this.erros.push(erro);
        }
    }
    /**
     * Execução de uma escrita na saída configurada, que pode ser `console` (padrão) ou
     * alguma função para escrever numa página Web.
     * @param declaracao A declaração.
     * @returns Sempre nulo, por convenção de visita.
     */
    async visitarDeclaracaoEscreva(declaracao) {
        try {
            const formatoTexto = await this.avaliarArgumentosEscrevaVisuAlg(declaracao.argumentos);
            this.funcaoDeRetorno(formatoTexto);
            return null;
        }
        catch (erro) {
            this.erros.push(erro);
        }
    }
    async visitarExpressaoFimPara(declaracao) {
        if (!this.eVerdadeiro(await this.avaliar(declaracao.condicaoPara))) {
            const escopoPara = this.pilhaEscoposExecucao.pilha[this.pilhaEscoposExecucao.pilha.length - 2];
            // Como o comando `proximo` ocorre fora de um laço de repetição que incrementa
            // a declaração atual do escopo, precisamos incrementar a declaração atual
            // do escopo do `para`. Normalmente, `FimPara` é sempre a última instrução
            // desse bloco de `para`.
            // TODO: Avaliar se há algum caso que pode ser afetado por esta lógica.
            // Este `if` foi retirado antes, e pode ser que algum outro bug surja por causa disso.
            if (this.comando === 'proximo') {
                escopoPara.declaracaoAtual++;
            }
            escopoPara.emLacoRepeticao = false;
            return new quebras_1.SustarQuebra();
        }
        if (declaracao.incremento === null || declaracao.incremento === undefined) {
            return;
        }
        await this.executar(declaracao.incremento);
    }
    /**
     * Execução da leitura de valores da entrada configurada no
     * início da aplicação.
     * @param expressao Expressão do tipo Leia
     * @returns Promise com o resultado da leitura.
     */
    async visitarExpressaoLeia(expressao) {
        return comum.visitarExpressaoLeia(this, expressao, this.mensagemPrompt);
    }
    async visitarDeclaracaoPara(declaracao) {
        if (!declaracao.inicializada && declaracao.inicializador !== null) {
            await this.avaliar(declaracao.inicializador);
            if (declaracao.incrementar !== null) {
                await comum.resolverIncrementoPara(this, declaracao);
            }
        }
        declaracao.inicializada = true;
        // Aqui precisamos clonar a declaração `Para` porque inserimos
        // ao final dela o incremento. Diferente de declarações `Para` de
        // outros dialetos, o incremento dessa declaração é implícito.
        const cloneDeclaracao = _.cloneDeep(declaracao);
        const corpoExecucao = cloneDeclaracao.corpo;
        // O incremento vai ao final do bloco de escopo.
        if (cloneDeclaracao.incrementar !== null) {
            await comum.resolverIncrementoPara(this, cloneDeclaracao);
            corpoExecucao.declaracoes.push(cloneDeclaracao.incrementar);
        }
        const escopoAtual = this.pilhaEscoposExecucao.topoDaPilha();
        switch (this.comando) {
            case 'proximo':
                if (cloneDeclaracao.condicao !== null &&
                    this.eVerdadeiro(await this.avaliar(cloneDeclaracao.condicao))) {
                    escopoAtual.emLacoRepeticao = true;
                    const resultadoBloco = this.executarBloco(corpoExecucao.declaracoes);
                    return resultadoBloco;
                }
                escopoAtual.emLacoRepeticao = false;
                declaracao.inicializada = false;
                return null;
            default:
                let retornoExecucao;
                while (!(retornoExecucao instanceof quebras_1.Quebra) && !this.pontoDeParadaAtivo) {
                    if (cloneDeclaracao.condicao !== null &&
                        !this.eVerdadeiro(await this.avaliar(cloneDeclaracao.condicao))) {
                        break;
                    }
                    try {
                        retornoExecucao = await this.executar(corpoExecucao);
                        if (retornoExecucao instanceof quebras_1.SustarQuebra) {
                            declaracao.inicializada = false;
                            return null;
                        }
                        if (retornoExecucao instanceof quebras_1.ContinuarQuebra) {
                            declaracao.inicializada = false;
                            retornoExecucao = null;
                        }
                    }
                    catch (erro) {
                        return Promise.reject(erro);
                    }
                }
                declaracao.inicializada = false;
                return retornoExecucao;
        }
    }
    async visitarExpressaoAcessoIndiceVariavel(expressao) {
        return comum.visitarExpressaoAcessoIndiceVariavel(this, expressao);
    }
    async visitarExpressaoAtribuicaoPorIndice(expressao) {
        return comum.visitarExpressaoAtribuicaoPorIndice(this, expressao);
    }
    async visitarExpressaoBinaria(expressao) {
        return comum.visitarExpressaoBinaria(this, expressao);
    }
    async visitarExpressaoLogica(expressao) {
        return comum.visitarExpressaoLogica(this, expressao);
    }
    async visitarDeclaracaoAleatorio(declaracao) {
        return comum.visitarDeclaracaoAleatorio(this, declaracao);
    }
    async visitarExpressaoFormatacaoEscrita(declaracao) {
        return comum.visitarExpressaoFormatacaoEscrita(this, declaracao);
    }
}
exports.InterpretadorVisuAlgComDepuracao = InterpretadorVisuAlgComDepuracao;
//# sourceMappingURL=interpretador-visualg-com-depuracao.js.map