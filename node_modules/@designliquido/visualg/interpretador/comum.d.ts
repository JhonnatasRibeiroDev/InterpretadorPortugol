import { AcessoElementoMatriz, AcessoIndiceVariavel, AtribuicaoPorIndice, AtribuicaoPorIndicesMatriz, Binario, Construto, FormatacaoEscrita, Logico } from '@designliquido/delegua/construtos';
import { Aleatorio, CabecalhoPrograma, Classe, FuncaoDeclaracao, InicioAlgoritmo, Leia, Para, Var } from '@designliquido/delegua/declaracoes';
import { InterpretadorBase } from '@designliquido/delegua/interpretador/interpretador-base';
import { PilhaEscoposExecucaoInterface } from '@designliquido/delegua/interfaces/pilha-escopos-execucao-interface';
import { InterpretadorVisuAlgInterface } from '../interfaces';
export declare function carregarBibliotecaGlobalCaracter(pilhaEscoposExecucao: PilhaEscoposExecucaoInterface): void;
export declare function carregarBibliotecaGlobalNumerica(pilhaEscoposExecucao: PilhaEscoposExecucaoInterface): void;
export declare function visitarDeclaracaoCabecalhoPrograma(interpretador: InterpretadorVisuAlgInterface, declaracao: CabecalhoPrograma): Promise<any>;
/**
 * Uma declaração de "classe" no VisuAlg nada mais é que a definição de um registro.
 * Não há propriedades e não há herança. Por isso usamos uma versão simplificada
 * da implementação original de Delégua.
 * @param declaracao A declaração de registro.
 * @returns Sempre retorna nulo, por ser requerido pelo contrato de visita.
 */
export declare function visitarDeclaracaoClasse(interpretador: InterpretadorVisuAlgInterface, declaracao: Classe): Promise<any>;
export declare function visitarDeclaracaoDefinicaoFuncao(interpretador: InterpretadorVisuAlgInterface, declaracao: FuncaoDeclaracao): Promise<void>;
export declare function visitarDeclaracaoInicioAlgoritmo(interpretador: InterpretadorVisuAlgInterface, declaracao: InicioAlgoritmo): Promise<any>;
export declare function atribuirVariavel(interpretador: InterpretadorVisuAlgInterface, expressao: Construto, valor: any): Promise<any>;
/**
 * Executa expressão de definição de variável.
 * @param declaracao A declaração Var
 * @returns Sempre retorna nulo.
 */
export declare function visitarDeclaracaoVar(interpretador: InterpretadorVisuAlgInterface, declaracao: Var): Promise<any>;
export declare function visitarExpressaoAcessoIndiceVariavel(interpretador: InterpretadorVisuAlgInterface, expressao: AcessoIndiceVariavel | any): Promise<any>;
export declare function visitarExpressaoAtribuicaoPorIndice(interpretador: InterpretadorVisuAlgInterface, expressao: AtribuicaoPorIndice): Promise<any>;
/**
 * Método de visita de expressão binária.
 * Reintroduzido pelas particularidades do VisuAlg.
 * @param expressao A expressão binária.
 * @returns O resultado da resolução da expressão.
 */
export declare function visitarExpressaoBinaria(interpretador: InterpretadorVisuAlgInterface, expressao: Binario | any): Promise<any>;
export declare function visitarExpressaoLogica(interpretador: InterpretadorVisuAlgInterface, expressao: Logico): Promise<any>;
export declare function resolverIncrementoPara(interpretador: InterpretadorVisuAlgInterface, declaracao: Para): Promise<any>;
export declare function visitarExpressaoAcessoElementoMatriz(interpretador: InterpretadorVisuAlgInterface, expressao: AcessoElementoMatriz): Promise<any>;
export declare function visitarExpressaoAtribuicaoPorIndicesMatriz(interpretador: InterpretadorVisuAlgInterface, expressao: AtribuicaoPorIndicesMatriz): Promise<any>;
export declare function visitarDeclaracaoAleatorio(interpretador: InterpretadorVisuAlgInterface, expressao: Aleatorio): Promise<any>;
/**
 * Formata uma saída de acordo com o número e espaços e casas decimais solicitados.
 * @param declaracao A declaração de formatação de escrita.
 * @returns {string} A saída formatada como texto e os respectivos parâmetros aplicados.
 */
export declare function visitarExpressaoFormatacaoEscrita(interpretador: InterpretadorBase, declaracao: FormatacaoEscrita): Promise<string>;
/**
 * Customização da leitura de dados de entrada.
 * A interrupção da execução para leitura de dados do usuário
 * ocorre quando o modo aleatório não está habilitado.
 * @param interpretador A instância do interpretador.
 * @param expressao A expressão `Leia`
 * @param mensagemPrompt A mensagem de prompt. Normalmente é o último conteúdo da função `escreva()`
 *                       ou ainda `escreval()`, e é usada em prompts Web, como por exemplo `window.prompt`.
 */
export declare function visitarExpressaoLeia(interpretador: InterpretadorVisuAlgInterface, expressao: Leia, mensagemPrompt: string): Promise<any>;
//# sourceMappingURL=comum.d.ts.map