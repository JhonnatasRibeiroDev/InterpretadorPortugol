import { AcessoElementoMatriz, AcessoIndiceVariavel, AtribuicaoPorIndice, AtribuicaoPorIndicesMatriz, Binario, FimPara, FormatacaoEscrita, Logico } from '@designliquido/delegua/construtos';
import { Aleatorio, CabecalhoPrograma, Classe, Const, Escreva, EscrevaMesmaLinha, Fazer, FuncaoDeclaracao, Leia, Para, Var } from '@designliquido/delegua/declaracoes';
import { InterpretadorBase } from '@designliquido/delegua/interpretador';
import { TipoEscopoExecucao } from '@designliquido/delegua/interfaces/escopo-execucao';
import { InterpretadorVisuAlgInterface } from '../interfaces';
import { LimpaTela } from '../construtos';
/**
 * Interpretador do VisuAlg, baseado no interpretador de Delégua.
 */
export declare class InterpretadorVisuAlg extends InterpretadorBase implements InterpretadorVisuAlgInterface {
    proximoEscopo?: TipoEscopoExecucao;
    mensagemPrompt: string;
    tiposConhecidos: string[];
    deveEscreverPrompt: boolean;
    funcaoLimpaTela: Function;
    constructor(diretorioBase: string, performance?: boolean, funcaoDeRetorno?: Function, funcaoDeRetornoMesmaLinha?: Function, funcaoLimpaTela?: Function);
    visitarExpressaoLimpaTela(expressao: LimpaTela): void | Promise<any>;
    visitarDeclaracaoInicioAlgoritmo(declaracao: CabecalhoPrograma): Promise<any>;
    visitarDeclaracaoCabecalhoPrograma(declaracao: CabecalhoPrograma): Promise<any>;
    visitarDeclaracaoConst(declaracao: Const): Promise<any>;
    visitarExpressaoAcessoElementoMatriz(expressao: AcessoElementoMatriz): Promise<any>;
    visitarExpressaoAtribuicaoPorIndice(expressao: AtribuicaoPorIndice): Promise<any>;
    visitarExpressaoAcessoIndiceVariavel(expressao: AcessoIndiceVariavel): Promise<any>;
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao: AtribuicaoPorIndicesMatriz): Promise<any>;
    /**
     * O Interpretador VisuAlg possui algumas diferenças em relação ao
     * Interpretador Delégua quanto à escrita na saída.
     * Para N argumentos, Delégua inclui um espaço entre cada argumento.
     * Já VisuAlg imprime todos os argumentos concatenados.
     */
    private avaliarArgumentosEscrevaVisuAlg;
    /**
     * Execução de uma escrita na saída configurada, que pode ser `console` (padrão) ou
     * alguma função para escrever numa página Web.
     * @param declaracao A declaração.
     * @returns Sempre nulo, por convenção de visita.
     */
    visitarDeclaracaoEscreva(declaracao: Escreva): Promise<any>;
    /**
     * Execução de uma escrita na saída padrão, sem quebras de linha.
     * Implementada para alguns dialetos, como VisuAlg.
     *
     * Como `readline.question` sobrescreve o que foi escrito antes, aqui
     * definimos `this.mensagemPrompt` para uso com `leia`.
     * No VisuAlg é muito comum usar `escreva()` seguido de `leia()` para
     * gerar um prompt na mesma linha.
     * @param declaracao A declaração.
     * @returns Sempre nulo, por convenção de visita.
     */
    visitarDeclaracaoEscrevaMesmaLinha(declaracao: EscrevaMesmaLinha): Promise<any>;
    /**
     * No VisuAlg, o bloco de condição executa se falso.
     * Por isso a reimplementação aqui.
     * @param declaracao A declaração `Fazer`
     * @returns Só retorna em caso de erro na execução, e neste caso, o erro.
     */
    visitarDeclaracaoFazer(declaracao: Fazer): Promise<any>;
    visitarExpressaoFimPara(declaracao: FimPara): Promise<any>;
    /**
     * Execução da leitura de valores da entrada configurada no
     * início da aplicação.
     * @param expressao Expressão do tipo Leia
     * @returns Promise com o resultado da leitura.
     */
    visitarExpressaoLeia(expressao: Leia): Promise<any>;
    visitarDeclaracaoClasse(declaracao: Classe): Promise<any>;
    visitarDeclaracaoDefinicaoFuncao(declaracao: FuncaoDeclaracao): Promise<void>;
    visitarDeclaracaoPara(declaracao: Para): Promise<any>;
    visitarDeclaracaoVar(declaracao: Var): Promise<any>;
    visitarExpressaoBinaria(expressao: Binario | any): Promise<any>;
    visitarExpressaoLogica(expressao: Logico): Promise<any>;
    visitarDeclaracaoAleatorio(declaracao: Aleatorio): Promise<any>;
    visitarExpressaoFormatacaoEscrita(declaracao: FormatacaoEscrita): Promise<string>;
}
//# sourceMappingURL=interpretador-visualg.d.ts.map