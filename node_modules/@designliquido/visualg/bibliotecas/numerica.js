"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.abs = abs;
exports.arccos = arccos;
exports.arcsen = arcsen;
exports.arctan = arctan;
exports.cos = cos;
exports.cotan = cotan;
exports.exp = exp;
exports.grauprad = grauprad;
exports.int = int;
exports.log = log;
exports.logn = logn;
exports.pi = pi;
exports.quad = quad;
exports.radpgrau = radpgrau;
exports.raizq = raizq;
exports.rand = rand;
exports.randi = randi;
exports.sen = sen;
exports.tan = tan;
function abs(interpretador, valor) {
    return Promise.resolve(Math.abs(valor));
}
function arccos(interpretador, valor) {
    return Promise.resolve(Math.acos(valor));
}
function arcsen(interpretador, valor) {
    return Promise.resolve(Math.asin(valor));
}
function arctan(interpretador, valor) {
    return Promise.resolve(Math.atan(valor));
}
function cos(interpretador, valor) {
    return Promise.resolve(Math.cos(valor));
}
function cotan(interpretador, valor) {
    return Promise.resolve(1 / Math.tan(valor));
}
function exp(interpretador, base, expoente) {
    const baseResolvida = base.hasOwnProperty('valor') ? base.valor : base;
    const expoenteResolvido = base.hasOwnProperty('valor') ? expoente.valor : expoente;
    return Promise.resolve(Math.pow(baseResolvida, expoenteResolvido));
}
function grauprad(interpretador, valor) {
    return Promise.resolve((valor * Math.PI) / 180);
}
function int(interpretador, valor) {
    return Promise.resolve(Math.floor(valor));
}
function log(interpretador, valor) {
    return Promise.resolve(Math.log10(valor));
}
function logn(interpretador, valor) {
    return Promise.resolve(Math.log(valor));
}
function pi() {
    return Promise.resolve(Math.PI);
}
function quad(interpretador, valor) {
    const valorResolvido = valor.hasOwnProperty('valor') ? valor.valor : valor;
    return Promise.resolve(valorResolvido * valorResolvido);
}
function radpgrau(interpretador, valor) {
    return Promise.resolve((valor * 180) / Math.PI);
}
function raizq(interpretador, valor) {
    const valorResolvido = valor.hasOwnProperty('valor') ? valor.valor : valor;
    return Promise.resolve(Math.sqrt(valorResolvido));
}
function rand() {
    return Promise.resolve(Math.random());
}
function randi(interpretador, limite) {
    return Promise.resolve(Math.floor(Math.random() * limite));
}
function sen(interpretador, valor) {
    return Promise.resolve(Math.sin(valor));
}
function tan(interpretador, valor) {
    return Promise.resolve(Math.tan(valor));
}
//# sourceMappingURL=numerica.js.map