"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalisadorSemanticoPotigol = void 0;
const analisador_semantico_1 = require("@designliquido/delegua/analisador-semantico");
const interfaces_1 = require("@designliquido/delegua/interfaces");
class AnalisadorSemanticoPotigol extends analisador_semantico_1.AnalisadorSemanticoBase {
    adicionarDiagnostico(simbolo, mensagem, severidade = interfaces_1.DiagnosticoSeveridade.ERRO) {
        this.diagnosticos.push({
            simbolo: simbolo,
            mensagem: mensagem,
            hashArquivo: simbolo.hashArquivo,
            linha: simbolo.linha,
            severidade: severidade,
        });
    }
    visitarDeclaracaoLeiaInteiro(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoLeiaInteiros(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoLeiaReais(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoLeiaReal(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoLeiaTexto(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoLeiaTextos(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoReatribuicaoVariavel(declaracao) {
        return Promise.resolve();
    }
    visitarDeclaracaoVar(declaracao) {
        this.variaveis[declaracao.simbolo.lexema] = {
            tipo: 'qualquer',
            subtipo: undefined,
            imutavel: false,
            valor: undefined,
            valorDefinido: true,
        };
        return Promise.resolve();
    }
    visitarExpressaoDeVariavel(expressao) {
        if (!(expressao.simbolo.lexema in this.variaveis)) {
            this.adicionarDiagnostico(expressao.simbolo, `Variável '${expressao.simbolo.lexema}' ainda não foi declarada.`);
        }
        return Promise.resolve();
    }
    visitarExpressaoQualTipo(expressao) {
        return Promise.resolve('');
    }
    analisar(declaracoes) {
        this.variaveis = {};
        this.atual = 0;
        this.diagnosticos = [];
        while (this.atual < declaracoes.length) {
            declaracoes[this.atual].aceitar(this);
            this.atual++;
        }
        return {
            diagnosticos: this.diagnosticos,
        };
    }
}
exports.AnalisadorSemanticoPotigol = AnalisadorSemanticoPotigol;
//# sourceMappingURL=analisador-semantico-potigol.js.map