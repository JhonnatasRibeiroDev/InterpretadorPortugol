import { InterpretadorBase } from '@designliquido/delegua/interpretador';
import { AcessoMetodoOuPropriedade, Construto, Tupla } from '@designliquido/delegua/construtos';
import { Const } from '@designliquido/delegua/declaracoes';
import { LeiaInteiro, LeiaInteiros, LeiaReais, LeiaReal, LeiaTexto, LeiaTextos, ReatribuicaoVariavel } from '../declaracoes';
import { InterpretadorPotigolInterface } from '../interfaces/interpretador-potigol-interface';
import { QualTipo } from '../construtos/qual-tipo';
/**
 * Uma implementação do interpretador de Potigol.
 */
export declare class InterpretadorPotigol extends InterpretadorBase implements InterpretadorPotigolInterface {
    constructor(diretorioBase: string, performance?: boolean, funcaoDeRetorno?: Function, funcaoDeRetornoMesmaLinha?: Function);
    /**
     * Expressões como por exemplo `x = leia_real` dão a dica do tipo
     * da variável no inicializador, o que nos obriga a reescrever a visita à
     * declarações de constantes.
     * @param {Const} declaracao A declaração de constante.
     * @returns Nulo.
     */
    visitarDeclaracaoConst(declaracao: Const): Promise<any>;
    visitarDeclaracaoLeiaInteiros(declaracao: LeiaInteiros): Promise<any> | void;
    visitarDeclaracaoLeiaReais(declaracao: LeiaReais): Promise<any> | void;
    visitarDeclaracaoLeiaTextos(declaracao: LeiaTextos): Promise<any> | void;
    visitarDeclaracaoLeiaInteiro(declaracao: LeiaInteiro): Promise<any> | void;
    visitarDeclaracaoLeiaReal(declaracao: LeiaReal): Promise<any> | void;
    visitarDeclaracaoLeiaTexto(declaracao: LeiaTexto): Promise<any> | void;
    paraTexto(objeto: any): any;
    protected resolverInterpolacoes(textoOriginal: string, linha: number): Promise<any[]>;
    protected retirarInterpolacao(texto: string, variaveis: any[]): string;
    visitarDeclaracaoReatribuicaoVariavel(expressao: ReatribuicaoVariavel): Promise<any>;
    visitarExpressaoAcessoMetodoOuPropriedade(expressao: AcessoMetodoOuPropriedade): Promise<any>;
    visitarExpressaoBinaria(expressao: any): Promise<any>;
    visitarExpressaoQualTipo(expressao: QualTipo): Promise<string>;
    visitarExpressaoTupla(expressao: Tupla): Promise<any>;
    protected avaliarArgumentosEscreva(argumentos: Construto[]): Promise<string>;
}
//# sourceMappingURL=interpretador-potigol.d.ts.map