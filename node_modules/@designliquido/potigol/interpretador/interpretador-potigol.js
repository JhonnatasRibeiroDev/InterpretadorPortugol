"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpretadorPotigol = void 0;
const interpretador_1 = require("@designliquido/delegua/interpretador");
const estruturas_1 = require("@designliquido/delegua/estruturas");
const lexador_1 = require("../lexador");
const micro_avaliador_sintatico_potigol_1 = require("../avaliador-sintatico/micro-avaliador-sintatico-potigol");
const comum = __importStar(require("./comum"));
/**
 * Uma implementação do interpretador de Potigol.
 */
class InterpretadorPotigol extends interpretador_1.InterpretadorBase {
    constructor(diretorioBase, performance = false, funcaoDeRetorno = null, funcaoDeRetornoMesmaLinha = null) {
        super(diretorioBase, performance, funcaoDeRetorno, funcaoDeRetornoMesmaLinha);
        this.expandirPropriedadesDeObjetosEmEspacoVariaveis = true;
        this.regexInterpolacao = /{(.*?)}/g;
        this.microLexador = new lexador_1.MicroLexadorPotigol();
        this.microAvaliadorSintatico = new micro_avaliador_sintatico_potigol_1.MicroAvaliadorSintaticoPotigol(-1);
        comum.carregarBibliotecaGlobal(this.pilhaEscoposExecucao);
    }
    /**
     * Expressões como por exemplo `x = leia_real` dão a dica do tipo
     * da variável no inicializador, o que nos obriga a reescrever a visita à
     * declarações de constantes.
     * @param {Const} declaracao A declaração de constante.
     * @returns Nulo.
     */
    async visitarDeclaracaoConst(declaracao) {
        const valorFinal = await this.avaliacaoDeclaracaoVarOuConst(declaracao);
        let tipoResolvido = declaracao.tipo;
        if (tipoResolvido === 'qualquer') {
            switch (declaracao.inicializador.constructor.name) {
                case 'LeiaInteiro':
                    tipoResolvido = 'inteiro';
                    break;
                case 'LeiaReal':
                    tipoResolvido = 'número';
                    break;
                case 'LeiaTexto':
                    tipoResolvido = 'texto';
                    break;
            }
        }
        this.pilhaEscoposExecucao.definirConstante(declaracao.simbolo.lexema, valorFinal, tipoResolvido);
        return null;
    }
    visitarDeclaracaoLeiaInteiros(declaracao) {
        return comum.visitarExpressaoLeiaMultiplo(this, declaracao);
    }
    visitarDeclaracaoLeiaReais(declaracao) {
        return comum.visitarExpressaoLeiaMultiplo(this, declaracao);
    }
    visitarDeclaracaoLeiaTextos(declaracao) {
        return comum.visitarExpressaoLeiaMultiplo(this, declaracao);
    }
    visitarDeclaracaoLeiaInteiro(declaracao) {
        return comum.visitarExpressaoLeia(this, declaracao);
    }
    visitarDeclaracaoLeiaReal(declaracao) {
        return comum.visitarExpressaoLeia(this, declaracao);
    }
    visitarDeclaracaoLeiaTexto(declaracao) {
        return comum.visitarExpressaoLeia(this, declaracao);
    }
    paraTexto(objeto) {
        if (objeto === null || objeto === undefined)
            return 'nulo';
        if (typeof objeto === 'boolean') {
            return objeto ? 'verdadeiro' : 'falso';
        }
        if (objeto instanceof Date) {
            const formato = Intl.DateTimeFormat('pt', {
                dateStyle: 'full',
                timeStyle: 'full',
            });
            return formato.format(objeto);
        }
        if (Array.isArray(objeto))
            return `[${objeto.join(', ')}]`;
        if (objeto.valor instanceof estruturas_1.ObjetoPadrao)
            return objeto.valor.paraTexto();
        if (typeof objeto === 'object')
            return JSON.stringify(objeto);
        return objeto.toString();
    }
    async resolverInterpolacoes(textoOriginal, linha) {
        return comum.resolverInterpolacoes(this, textoOriginal, linha);
    }
    retirarInterpolacao(texto, variaveis) {
        return comum.retirarInterpolacao(texto, variaveis);
    }
    async visitarDeclaracaoReatribuicaoVariavel(expressao) {
        return comum.visitarDeclaracaoReatribuicaoVariavel(this, expressao);
    }
    async visitarExpressaoAcessoMetodoOuPropriedade(expressao) {
        return comum.visitarExpressaoAcessoMetodoOuPropriedade(this, expressao);
    }
    async visitarExpressaoBinaria(expressao) {
        return comum.visitarExpressaoBinaria(this, expressao);
    }
    async visitarExpressaoQualTipo(expressao) {
        return comum.visitarExpressaoQualTipo(this, expressao);
    }
    async visitarExpressaoTupla(expressao) {
        return comum.visitarExpressaoTupla(this, expressao);
    }
    async avaliarArgumentosEscreva(argumentos) {
        return comum.avaliarArgumentosEscreva(this, argumentos.length > 0 ? argumentos[0] : undefined);
    }
}
exports.InterpretadorPotigol = InterpretadorPotigol;
//# sourceMappingURL=interpretador-potigol.js.map