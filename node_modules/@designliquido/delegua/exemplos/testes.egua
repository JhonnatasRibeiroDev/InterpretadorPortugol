escreva("--------------------------------");
escreva("Testes Internos - Linguagem Egua");
escreva("--------------------------------");
escreva("|");

var erros = 0;

função startTest(){
  escreva(tSesenão());
  escreva("|");
  escreva(tEnquanto());
  escreva("|");
  escreva(tPara());
  escreva("|");
  escreva(tFacaEnquanto());
  escreva("|");
  escreva(tCasoEscolha());
  escreva("|");
  escreva(tTentePegue());
  escreva("|");
  escreva(tClasse());
}

função tSesenão(){
  escreva("----------------------------");
  escreva("Iniciando Teste: Se - Se Não");
  escreva("----------------------------");
  var a = 1;
  var b = 1;
  se (a == b)
    retorna("Se - Se não: OK!");
  senão {
    erros = erros + 1;
    retorna("Se - Se não: ERRO!");
  }
}

função tEnquanto(){
  escreva("------------------------");
  escreva("Iniciando Teste: Enquanto");
  escreva("------------------------");
  var a = 0;
  enquanto(a<5){
    a = a + 1;
  }
  se (a == 5)
    retorna("Enquanto: OK!");
  senão {
    erros = erros + 1;
    retorna("Enquanto: ERRO!");
  }
  escreva(a);
}

função tPara(){
  escreva("--------------------");
  escreva("Iniciando Teste: Para");
  escreva("--------------------");
  var a = 0;
  para (var i = 0; i < 5; i = i + 1) {
  a = a + 1;
  }
  se (a == 5)
    retorna("Para: OK!");
  senão {
    erros = erros + 1;
    retorna("Para: ERRO!");
  }
}

função tFacaEnquanto(){
  escreva("-----------------------------");
  escreva("Iniciando Teste: Faça - Enquanto");
  escreva("-----------------------------");
  var a = 0;
  fazer {
    a = a + 1;
  } enquanto(a<5){
  }
  se (a == 5)
    retorna("Faça - Enquanto: OK!");
  senão {
    erros = erros + 1;
    retorna("Faça - Enquanto: ERRO!");
  }
}

função tCasoEscolha(){
  escreva("--------------------");
  escreva("Iniciando Teste: Caso - Escolha");
  escreva("--------------------");
  escolha(1){
    caso 1: 
    retorna("Caso - Escolha: OK!");  
    caso 2:
    retorna("Caso - Escolha: ERRO!");
  }
}

função tTentePegue(){
  escreva("--------------------");
  escreva("Iniciando Teste: Tente - Pegue");
  escreva("--------------------");
  tente {
  1 > "1";
  escreva("Tente - Pegue: ERRO!");
  } pegue {
  escreva("Tente - Pegue: OK!");
  } finalmente {
  retorna(" ");  
  }
}

função tClasse(){
  escreva("--------------------");
  escreva("Iniciando Teste: Classe");
  escreva("--------------------");
  tente{
  classe Animal {
    correr() {
      escreva("Correndo Loucamente");
    }
  }
  classe Cachorro herda Animal {
    latir() {
      escreva("Au Au Au Au");
    }
  }
  var nomeDoCachorro = Cachorro();
  nomeDoCachorro.correr();
  nomeDoCachorro.latir();
  escreva("Classe: OK!");
  } pegue {
  escreva("Classe: ERRO!");  
  } finalmente {
  retorna(" ");
  }
}

startTest();
escreva("----------------------------");
escreva("Teste terminado com " + texto(erros) + " erro(s)!");
escreva("----------------------------");


escreva("--------------------------------");
escreva("Testes Internos - Biblioteca Matemática");
escreva("--------------------------------");
escreva("|");

var errosM = 0;


var m = importar("matematica");
var nula = nulo;

var o = [1,1,2,3,15];
var p = [2,6,7,10,20];


função teste_gerarPontosAbscissa() {
  var gerarPontosAbscissa = m.gerarPontosAbscissa(2,3);

  se (gerarPontosAbscissa != nula)
    escreva (gerarPontosAbscissa);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tfun1R(){
  var fun1R = m.fun1R(2,3);
  
  se (fun1R != nula)
        escreva (fun1R);
      senão {
        errosM = errosM+1;
        escreva(errosM);
      }
}

função tfun2R(){
  var fun2R = m.fun2R(2,-4,3);
  
  se (fun2R != nula)
    escreva (fun2R);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função taprox(){
  var aprox = m.aprox(1,10);
  
  se (aprox != nula)
        escreva (aprox);
  senão {
        errosM = errosM+1;
        escreva(errosM);

    }
}


função tsen(){
  var sen = m.sen(60);
  
  se (sen != nula)
        escreva (sen);
      senão {
        errosM = errosM+1;
        escreva(errosM);
      }
}

função tcos(){
  var cos = m.cos(60);
  
  se (cos != nula)
        escreva (cos);
      senão {
        errosM = errosM+1;
        escreva(errosM);
      }
}

função ttan(){
  var tan = m.tan(60);

  se (tan != nula)
    escreva (tan);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tarsen(){
  var arsen = m.arsen(60);

  se (arsen != nula)
    escreva (arsen);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tarcos(){
  var arcos = m.arcos(60);

  se (arcos != nula)
    escreva (arcos);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tartan(){
  var artan = m.artan(60);

  se (artan != nula)
    escreva (artan);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função texp(){
  var exp = m.exp(10);

  se (exp != nula)
    escreva (exp);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tlog(){
  var log = m.log(10);
  
  se (log != nula)
    escreva(log);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tpotencia(){
  var pot = m.potencia(2,3);
  
  se (pot != nula)
    escreva(pot);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função traizq(){
  var raizq = m.raizq(49);

  se (raizq != nula)
    escreva(raizq);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tvmed(){
  var vmed = m.velocidadeMedia(30,10);

  se (vmed != nula)
    escreva(vmed);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tdeltas(){
  var deltas = m.deltaS(10,30);

  se (deltas != nula)
    escreva(deltas);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tdeltat(){
  var deltat = m.deltaT(10,30);

  se (deltat != nula)
    escreva(deltat);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tacel(){
  var acel= m.aceleracao(30,0,60,0);
  
  se (acel != nula)
    escreva(acel);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tmrufh(){
  var mrufh = m.mrufh(0,30,15);

  se (mrufh != nula)
    escreva(mrufh);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tmruvvel(){
  var mruvvel = m.mruv(0,30,15,2);

  se (mruvvel != nula)
    escreva(mruvvel);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tmoda(){
  var i = [1,2,2,3,4];
  var modaUm = m.moda(i);
  var j = [1,2,2,3,3];
  var modaDois = m.moda(j);
  var k = [1,2,3,4,5];
  var modaTres = m.moda(k);
  
  se (modaUm[0] == 2)
    escreva(modaUm);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
  se (modaDois[0] == 2 e modaDois[1] == 3)
    escreva(modaDois);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }

  se (modaTres)
    escreva(modaTres);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

escreva("--------------------------------");
escreva("Função gerarPontosAbscissa:");
teste_gerarPontosAbscissa();
escreva("|");
escreva("--------------------------------");
escreva("Função fun1R:");
tfun1R();
escreva("|");
escreva("--------------------------------");
escreva("Função fun2R:");
tfun2R();
escreva("|");
escreva("--------------------------------");
escreva("Função aprox:");
taprox();

escreva("|");
escreva("--------------------------------");
escreva("Função numeroOcorrencias():");
escreva(m.numeroOcorrencias([1, 2, 3, 4, 5], 3));

escreva("|");
escreva("--------------------------------");
escreva("Função max():");
escreva(m.max([1, 2, 3, 4, 5]));

escreva("|");
escreva("--------------------------------");
escreva("Função min():");
escreva(m.min([1, 2, 3, 4, 5]));

escreva("|");
escreva("--------------------------------");
escreva("Função sen:");
tsen();
escreva("|");
escreva("--------------------------------");
escreva("Função cos:");
tcos();
escreva("|");
escreva("--------------------------------");
escreva("Função tan:");
ttan();
escreva("|");
escreva("--------------------------------");
escreva("Função arsen:");
tarsen();
escreva("|");
escreva("--------------------------------");
escreva("Função arcos:");
tarcos();
escreva("|");
escreva("--------------------------------");
escreva("Função artan:");
tartan();
escreva("|");
escreva("--------------------------------");
escreva("Função exp:");
texp();
escreva("|");
escreva("--------------------------------");
escreva("Função log:");
tlog();
escreva("|");
escreva("--------------------------------");
escreva("Função potencia:");
tpotencia();
escreva("|");
escreva("--------------------------------");
escreva("Função raizq:");
traizq();
escreva("|");
escreva("--------------------------------");
escreva("Função vmed:");
tvmed();
escreva("|");
escreva("--------------------------------");
escreva("Função deltas:");
tdeltas();
escreva("|");
escreva("--------------------------------");
escreva("Função deltat:");
tdeltat();
escreva("|");
escreva("--------------------------------");
escreva("Função acel:");
tacel();
escreva("|");
escreva("--------------------------------");
escreva("Função mruhfh:");
tmrufh();
escreva("|");
escreva("--------------------------------");
escreva("Função mruvvel:");
tmruvvel();
escreva("--------------------------------");
escreva("Função moda:");
tmoda();
escreva("|");

escreva("--------------------------------");
escreva("Testes Funções Internas - Linguagem Egua");
escreva("--------------------------------");
escreva("|");

função ttamanho(){
  var array = [1,2,3];
  var tam = tamanho(array);

  se (tam != nula)
    escreva(tam);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função ttexto(){
  var t = 123;
  var text = texto(t);

  se (text != nula)
    escreva(text);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função treal(){
  var n = '123.05';
  var rel = real(n);

  se (rel != nula)
    escreva(rel);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tinteiro(){
  var i = '50.56';
  var int = inteiro(i);

  se (int != nula)
    escreva(int);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função tordenar(){
  var i = [4,2,1,5,3];
  var ord = ordenar(i);

  se (ord != nula)
    escreva(ord);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função taleatorio(){
  var ran = aleatorio();
  se (ran != nula)
    escreva(ran);
  senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

função taleatorioEntre(){
  var ran = aleatorioEntre(3);

  se (ran < 3) {
    escreva(ran);
  } senão {
    errosM = errosM+1;
    escreva(errosM);
  }

  var ran2 = aleatorioEntre(1,3);

  se (ran2 >= 1) {
    se (ran2 < 3) {
      escreva(ran2);
    } senão {
      errosM = errosM+1;
      escreva(errosM);
    }
  } senão {
    errosM = errosM+1;
    escreva(errosM);
  }
}

escreva("--------------------------------");
escreva("Função interna: Tamanho");
ttamanho();
escreva("|");
escreva("--------------------------------");
escreva("Função interna: Texto");
ttexto();
escreva("|");
escreva("--------------------------------");
escreva("Função interna: Real");
treal();
escreva("|");
escreva("--------------------------------");
escreva("Função interna: Inteiro");
tinteiro();
escreva("|");
escreva("--------------------------------");
escreva("Função interna: Ordenar");
tordenar();
escreva("|");
escreva("--------------------------------");
escreva("Função interna: Aleatório");
taleatorio();
escreva("|");
escreva("--------------------------------");
escreva("Função interna: Aleatório Entre");
taleatorioEntre();
escreva("|");
escreva("--------------------------------");
escreva("Teste terminado com " + texto(errosM) + " erro(s)!");
escreva("----------------------------");

escreva("Testando estado de função e classe");
função a(){
    retorna 1;
}

escreva(a);

classe Animal {
  correr() {
      escreva("Correndo Loucamente");
  }
} 

escreva(Animal);
escreva("----------------------------");

escreva("Testando paraCada");
var array = [1, 2, 3];

var fn = função(valor){
  escreva(valor);
};

paraCada(array, fn);

escreva("Testando mapear");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor * 2;
};

escreva(mapear(array, fn));

escreva("Testando filtrar");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor % 2 == 0;
};

escreva(filtrar(array, fn));

escreva("Testando reduzir");
var array = [1, 2, 3];

var fn = função(total, valor){
  retorna texto(total) + texto(valor);
};

escreva(reduzir(array, fn, ''));

escreva("Testando encontrar");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor == 4;
};

escreva(encontrar(array, fn));

escreva("Testando encontrarIndice");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor == 3;
};

escreva(encontrarIndice(array, fn));

escreva("Testando encontrar");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor == 4;
};

escreva(encontrar(array, fn));

escreva("Testando encontrarIndice");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor == 3;
};

escreva(encontrarIndice(array, fn));

escreva("Testando encontrarUltimo");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor > 1;
};

escreva(encontrarUltimo(array, fn));

escreva("Testando encontrarUltimoIndice");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor > 1;
};

escreva(encontrarUltimoIndice(array, fn));

escreva("Testando incluido");
var array = [1, 2, 3];

escreva(incluido(array, 3));

escreva("Testando algum");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor > 3;
};

escreva(algum(array, fn));

escreva("Testando todos");
var array = [1, 2, 3];

var fn = função(valor){
  retorna valor >= 1;
};

escreva(todos(array, fn));

escreva("----------------------------");

escreva("--------------------------------");
escreva("Testes Internos - Biblioteca Textos");
escreva("--------------------------------");
escreva("|");

var t = importar("textos"); // Importa Biblioteca
var erros_t = 0;
var nula = nulo;
var texto_teste = "Programação simples e moderna em português";

função checa_minusculas()  {
  var esperado = "abcdefghijklmnopqrstuvwxyz";
  var obtido = t.letras_minusculas;

  se (obtido != esperado) {
    escreva("TESTE: letras_minusculas: falhou!");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: letras_minusculas: passou!");
}

função checa_maiusculas()  {
  var esperado = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var obtido = t.letras_maiusculas;
  se (obtido != esperado) {
    escreva("TESTE: letras_maiusculas: falhou!");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: letras_maiusculas: passou!");
}

função checa_letras(){
  var esperado = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var obtido = t.letras;
  se (obtido != esperado) {
    escreva("TESTE: letras: falhou!");
    escreva("| esperado: '" + esperado + "'");
    escreva("| obtido: '" + obtido + "'");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: letras: passou!");
}

função checa_digitos(){
  var esperado = "0123456789";
  var obtido = t.digitos;

  se (obtido != esperado) {
    escreva("TESTE: digitos: falhou!");
    escreva("| esperado: '" + esperado + "'");
    escreva("| obtido: '" + obtido + "'");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: digitos: passou!");
}

função checa_pontuacoes(){
  var esperado = '!"'+"#$%&'()*+,-./:;<=>?@[\]^_`{|}~";
  var obtido = t.pontuacoes;

  se (obtido != esperado) {
    escreva("TESTE: pontuacoes: falhou!");
    escreva("| esperado: '" + esperado + "'");
    escreva("| obtido: '" + obtido + "'");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: pontuacoes: passou!");
}

função testa_maiusculo(){
  var esperado = "PROGRAMAÇÃO SIMPLES E MODERNA EM PORTUGUÊS";
  var  obtido = t.maiusculo(texto_teste);

  se (obtido != esperado) {
    escreva("TESTE: função maiusculo(): falhou!");
    escreva("| esperado: '" + esperado + "'");
    escreva("| obtido: '" + obtido + "'");
    erros_t = erros_t + 1;
    retorna;
  }
   escreva("TESTE: função maiusculo(): passou!");
}

função testa_minusculo(){
  var esperado = "programação simples e moderna em português";
  var  obtido = t.minusculo(texto_teste);

  se (obtido != esperado) {
    escreva("TESTE: função minusculo(): falhou!");
    escreva("| esperado: '" + esperado + "'");
    escreva("| obtido: '" + obtido + "'");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: função minusculo(): passou!");
}

função testa_contem(){
  var esperado = verdadeiro;
  var  obtido = t.contem(texto_teste, "simples");
    
  se (obtido != esperado) {
    escreva("TESTE: função contem(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  escreva("TESTE: função contem(): passou!");
}

função testa_formate(){
  var texto_teste = "{} {} {} {} {} {}";
  var esperado = "1 2.5 verdadeiro falso egua nulo";
  var  obtido = t.formate(texto_teste, 1, 2.5, verdadeiro, falso, "egua", nula);

  se (obtido != esperado) {
    escreva("TESTE: função formate(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }
  escreva("TESTE: função formate(): passou!");
}

função testa_dividir(){
  var esperado = ['Programação','simples','e','moderna','em','português'];
  var  obtido = t.dividir(texto_teste, ' ');
  
  se (tamanho(esperado) != tamanho(obtido)){
    escreva("TESTE: função dividir(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  para (var i = 0; i < tamanho(esperado); i = i + 1){
    se (obtido[i] != esperado[i]){
      escreva("TESTE: função dividir(): falhou!");
      escreva("| esperado: '" + texto(esperado) + "'");
      escreva("| obtido: '" + texto(obtido) + "'");
      erros_t = erros_t + 1;
      retorna;
    }
  }
  escreva("TESTE: função dividir(): passou!");
}

função testa_tamanho(){
  var esperado = 42;
  var  obtido = t.tamanho(texto_teste);

  se (esperado != obtido){
    escreva("TESTE: função tamanho(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  escreva("TESTE: função tamanho(): passou!");
}

função testa_repita(){
  var texto_teste = "aa";
  var esperado = "aaaaaa";
  var obtido = t.repita(texto_teste, 3);

  se (esperado != obtido){
    escreva("TESTE: função repita(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  escreva("TESTE: função repita(): passou!");
}

função testa_substituir(){
  var texto_teste = "aaacaa";
  var esperado = "aaabaa";
  var obtido = t.substituir(texto_teste, "c", "b");

  se (esperado != obtido){
    escreva("TESTE: função substituir(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  escreva("TESTE: função substituir(): passou!");
}

função testa_busca(){
  var texto_teste = "aabaa";
  var esperado = 2;
  var obtido = t.busca(texto_teste, "b");

  se (esperado != obtido){
    escreva("TESTE: função busca(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  escreva("TESTE: função busca(): passou!");
}

função testa_apara(){
  var texto_teste = "  egua  ";
  var esperado = "egua";
  var obtido = t.apara(texto_teste);

  se (esperado != obtido){
    escreva("TESTE: função apara(): falhou!");
    escreva("| esperado: '" + texto(esperado) + "'");
    escreva("| obtido: '" + texto(obtido) + "'");
    erros_t = erros_t + 1;
    retorna;
  }

  escreva("TESTE: função apara(): passou!");
}

checa_minusculas();
checa_maiusculas();
checa_letras();
checa_digitos();
checa_pontuacoes();
testa_maiusculo();
testa_minusculo();
testa_contem();
testa_formate();
testa_dividir();
testa_tamanho();
testa_repita();
testa_substituir();
testa_busca();
testa_apara();

escreva("----------------------------");
escreva("  terminado com " + texto(erros_t) + " erro(s)!");
escreva("----------------------------");