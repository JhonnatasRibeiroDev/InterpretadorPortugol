import { RetornoLexador, RetornoAvaliadorSintatico } from '@designliquido/delegua/interfaces/retornos';
import { AvaliadorSintaticoBase } from '@designliquido/delegua/avaliador-sintatico/avaliador-sintatico-base';
import { Declaracao, Enquanto, Escolha, Escreva, EscrevaMesmaLinha, Fazer, FuncaoDeclaracao, Leia, Para, Se } from '@designliquido/delegua/declaracoes';
import { Comentario, Construto, FuncaoConstruto } from '@designliquido/delegua/construtos';
import { SimboloInterface } from '@designliquido/delegua/interfaces';
export declare class AvaliadorSintaticoMapler extends AvaliadorSintaticoBase {
    lendoModulos: boolean;
    modulos: string[];
    constructor();
    private criarVetorNDimensional;
    private validarDimensoesVetor;
    private logicaComumParametroMapler;
    /**
     * Validação do segmento de declaração de variáveis (opcional).
     * @returns Vetor de Construtos para inicialização de variáveis.
     */
    private validarSegmentoVariaveis;
    estaNoFinal(): boolean;
    primario(): Construto;
    comparacaoIgualdade(): Construto;
    ou(): Construto;
    /**
     * Método que resolve atribuições.
     * @returns Um construto do tipo `Atribuir`, `Conjunto` ou `AtribuicaoPorIndice`.
     */
    atribuir(): Construto;
    expressao(): Construto;
    blocoEscopo(): any[];
    chamar(): Construto;
    corpoDaFuncao(tipo: string): FuncaoConstruto;
    declaracaoComentario(): Comentario;
    declaracaoEnquanto(): Enquanto;
    declaracaoEscolha(): Escolha;
    private logicaComumEscreva;
    declaracaoEscreva(): Escreva;
    declaracaoEscrevaMesmaLinha(): EscrevaMesmaLinha;
    /**
     * Criação de declaração "repita".
     * @returns Um construto do tipo Fazer
     */
    declaracaoFazer(): Fazer;
    /**
     * Criação de declaração "interrompa".
     * Em Mapler, "sustar" é chamada de "interrompa".
     * @returns Uma declaração do tipo Sustar.
     */
    private declaracaoInterrompa;
    /**
     * Análise de uma declaração `leia()`. No Mapler, `leia()` aceita 1..N argumentos.
     * @returns Uma declaração `Leia`.
     */
    declaracaoLeia(): Leia;
    /**
     * Um módulo em Mapler nada mais é do que uma função.
     * Um módulo aparentemente não especifica tipo de retorno.
     * @returns Uma declaração de função.
     */
    protected declaracaoModulo(): FuncaoDeclaracao;
    declaracaoPara(): Para;
    declaracaoSe(): Se;
    resolverDeclaracaoForaDeBloco(): Declaracao | Declaracao[] | Construto | Construto[] | any;
    /**
     * No Mapler, há uma determinada cadência de validação de símbolos.
     * @param retornoLexador Os símbolos entendidos pelo Lexador.
     * @param hashArquivo Obrigatório por interface mas não usado aqui.
     */
    analisar(retornoLexador: RetornoLexador<SimboloInterface>, hashArquivo: number): RetornoAvaliadorSintatico<Declaracao>;
}
//# sourceMappingURL=avaliador-sintatico-mapler.d.ts.map