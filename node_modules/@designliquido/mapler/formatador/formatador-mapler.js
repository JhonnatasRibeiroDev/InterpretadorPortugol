"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatadorMapler = void 0;
const delegua_1 = require("@designliquido/delegua");
const comum_1 = __importDefault(require("../tipos-de-dados/comum"));
const mapler_1 = __importDefault(require("../tipos-de-dados/mapler"));
const lexico_regular_1 = __importDefault(require("../tipos-de-simbolos/lexico-regular"));
const pilha_escopos_formatacao_1 = require("./pilha-escopos-formatacao");
class FormatadorMapler {
    constructor(quebraLinha, tamanhoIndentacao = 4) {
        this.quebraLinha = quebraLinha;
        this.tamanhoIndentacao = tamanhoIndentacao;
        this.indentacaoAtual = 0;
        this.codigoFormatado = '';
        this.devePularLinha = true;
        this.deveIndentar = true;
        this.eEstruturaPara = false;
    }
    visitarExpressaoFuncaoConstruto(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoArgumentoReferenciaFuncao(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoReferenciaFuncao(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoAcessoMetodo(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoAcessoPropriedade(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoAleatorio(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoCabecalhoPrograma(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoClasse(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoComentario(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}// `;
        this.codigoFormatado += declaracao.conteudo.replace(/\s+/g, ' ');
        this.codigoFormatado += `${this.quebraLinha}`;
    }
    visitarDeclaracaoConst(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoConstMultiplo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoDeExpressao(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoDefinicaoFuncao(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoEnquanto(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}enquanto `;
        this.formatarDeclaracaoOuConstruto(declaracao.condicao);
        this.codigoFormatado += ` faca`;
        this.codigoFormatado += this.quebraLinha;
        this.formatarDeclaracaoOuConstruto(declaracao.corpo);
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}fim enquanto;${this.quebraLinha}`;
    }
    visitarDeclaracaoEscolha(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoEscreva(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}escrever `;
        this.deveIndentar = false;
        for (let argumento of declaracao.argumentos) {
            this.formatarDeclaracaoOuConstruto(argumento);
            this.codigoFormatado += `, `;
        }
        this.deveIndentar = true;
        if (declaracao.argumentos.length > 0) {
            this.codigoFormatado = this.codigoFormatado.slice(0, -2);
        }
        this.codigoFormatado += `;${this.quebraLinha}`;
    }
    visitarDeclaracaoEscrevaMesmaLinha(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoFazer(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}repita${this.quebraLinha}`;
        this.formatarDeclaracaoOuConstruto(declaracao.caminhoFazer);
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}ate `;
        this.formatarDeclaracaoOuConstruto(declaracao.condicaoEnquanto);
        this.codigoFormatado += `;${this.quebraLinha}`;
    }
    visitarDeclaracaoImportar(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoInicioAlgoritmo(declaracao) {
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}inicio `;
        this.codigoFormatado += `${this.quebraLinha}`;
        this.indentacaoAtual += this.tamanhoIndentacao;
    }
    visitarDeclaracaoPara(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}para `;
        this.devePularLinha = false;
        this.eEstruturaPara = true;
        if (declaracao.inicializador) {
            this.deveIndentar = false;
            if (Array.isArray(declaracao.inicializador)) {
                for (let declaracaoInicializador of declaracao.inicializador) {
                    this.formatarDeclaracaoOuConstruto(declaracaoInicializador);
                }
            }
            else {
                this.formatarDeclaracaoOuConstruto(declaracao.inicializador);
            }
            this.deveIndentar = true;
        }
        if (declaracao.condicao instanceof delegua_1.Binario)
            this.codigoFormatado += ` ate ${declaracao.condicao.direita.valor}`;
        else
            this.formatarDeclaracaoOuConstruto(declaracao.condicao);
        this.formatarDeclaracaoOuConstruto(declaracao.incrementar);
        this.codigoFormatado += ` faca${this.quebraLinha}`;
        this.formatarBlocoOuVetorDeclaracoes(declaracao.corpo.declaracoes);
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}fim para;${this.quebraLinha}`;
        this.devePularLinha = true;
        this.eEstruturaPara = false;
    }
    visitarDeclaracaoParaCada(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoSe(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}se `;
        this.formatarDeclaracaoOuConstruto(declaracao.condicao);
        this.codigoFormatado += ` entao${this.quebraLinha}`;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracaoBloco of declaracao.caminhoEntao.declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracaoBloco);
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        if (declaracao.caminhoSenao) {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}senao${this.quebraLinha}`;
            this.formatarDeclaracaoOuConstruto(declaracao.caminhoSenao);
        }
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}fim se;${this.quebraLinha}`;
    }
    visitarDeclaracaoTendoComo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoTente(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarDeclaracaoVar(declaracao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}${declaracao.simbolo.lexema}: `;
        switch (declaracao.tipo) {
            case comum_1.default.TEXTO:
                this.codigoFormatado += mapler_1.default.CADEIA;
                break;
            case comum_1.default.LOGICO:
            case 'lógico':
                this.codigoFormatado += mapler_1.default.LOGICO;
                break;
            case mapler_1.default.VETOR:
                this.codigoFormatado += `${mapler_1.default.VETOR} `;
                if (Array.isArray(declaracao.inicializador.valor)) {
                    const tamanhoVetor = declaracao.inicializador.valor.length;
                    this.codigoFormatado += `[${declaracao.inicializador.valor[0]}..${declaracao.inicializador.valor[tamanhoVetor - 1]}]`;
                }
                break;
            default:
                this.codigoFormatado += declaracao.tipo;
                console.log(declaracao.tipo);
                break;
        }
        this.codigoFormatado += `;${this.quebraLinha}`;
    }
    visitarDeclaracaoVarMultiplo(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoDeAtribuicao(expressao) {
        if (this.deveIndentar) {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}`;
        }
        this.formatarDeclaracaoOuConstruto(expressao.alvo);
        if (this.eEstruturaPara) {
            this.codigoFormatado += ` de `;
        }
        else {
            this.codigoFormatado += ` <- `;
        }
        this.formatarDeclaracaoOuConstruto(expressao.valor);
        if (this.devePularLinha) {
            this.codigoFormatado += `;${this.quebraLinha}`;
        }
    }
    visitarExpressaoAcessoIndiceVariavel(expressao) {
        if (this.deveIndentar) {
            this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}`;
        }
        let variavel;
        let valor;
        if (expressao.entidadeChamada instanceof delegua_1.Variavel) {
            variavel = expressao.entidadeChamada.simbolo.lexema;
        }
        else {
            variavel = expressao.entidadeChamada.valor;
        }
        if (expressao.indice instanceof delegua_1.Variavel) {
            valor = expressao.indice.simbolo.lexema;
        }
        else {
            valor = expressao.indice.valor;
        }
        this.codigoFormatado += `${variavel}[${valor}]`;
    }
    visitarExpressaoAcessoElementoMatriz(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoAcessoMetodoOuPropriedade(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoAgrupamento(expressao) {
        this.codigoFormatado += '(';
        this.formatarDeclaracaoOuConstruto(expressao.expressao);
        this.codigoFormatado += ')';
    }
    visitarExpressaoAtribuicaoPorIndice(expressao) {
        const variavel = expressao.objeto;
        let posicao;
        let valor;
        if (expressao.indice instanceof delegua_1.Variavel) {
            posicao = expressao.indice.simbolo.lexema;
        }
        else if (expressao.indice instanceof delegua_1.Literal) {
            posicao = expressao.indice.valor;
        }
        if (expressao.valor instanceof delegua_1.Variavel) {
            valor = expressao.valor.simbolo.lexema;
        }
        else if (expressao.valor instanceof delegua_1.Literal) {
            valor = expressao.valor.valor;
        }
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}${variavel.simbolo.lexema}[${posicao}] <- ${valor};${this.quebraLinha}`;
    }
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoBinaria(expressao) {
        this.formatarDeclaracaoOuConstruto(expressao.esquerda);
        switch (expressao.operador.tipo) {
            case lexico_regular_1.default.ADICAO:
                this.codigoFormatado += ' + ';
                break;
            case lexico_regular_1.default.DIVISAO:
                this.codigoFormatado += ' / ';
                break;
            case lexico_regular_1.default.IGUAL:
                this.codigoFormatado += ' = ';
                break;
            case lexico_regular_1.default.MAIOR:
                this.codigoFormatado += ' > ';
                break;
            case lexico_regular_1.default.MAIOR_IGUAL:
                this.codigoFormatado += ' >= ';
                break;
            case lexico_regular_1.default.MENOR:
                this.codigoFormatado += '<';
                break;
            case lexico_regular_1.default.MENOR_IGUAL:
                this.codigoFormatado += ' <= ';
                break;
            case lexico_regular_1.default.SUBTRACAO:
                this.codigoFormatado += ` - `;
                break;
            case lexico_regular_1.default.MULTIPLICACAO:
                this.codigoFormatado += ` * `;
                break;
            case lexico_regular_1.default.MODULO:
                this.codigoFormatado += ` % `;
                break;
            default:
                console.log(expressao.operador.tipo);
                break;
        }
        this.formatarDeclaracaoOuConstruto(expressao.direita);
    }
    visitarExpressaoBloco(declaracao) {
        this.formatarBlocoOuVetorDeclaracoes(declaracao.declaracoes);
    }
    visitarExpressaoContinua(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoDeChamada(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoDefinirValor(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoDeleguaFuncao(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoDeVariavel(expressao) {
        this.codigoFormatado += expressao.simbolo.lexema;
    }
    visitarExpressaoDicionario(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoExpressaoRegular(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoFalhar(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoFimPara(declaracao) {
        if (declaracao.incremento) {
            this.codigoFormatado += ` passo `;
            const incremento = declaracao.incremento;
            this.formatarDeclaracaoOuConstruto(incremento.expressao.valor.direita);
        }
    }
    visitarExpressaoFormatacaoEscrita(declaracao) {
        this.formatarDeclaracaoOuConstruto(declaracao.expressao);
    }
    visitarExpressaoIsto(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoLeia(expressao) {
        this.codigoFormatado += `${' '.repeat(this.indentacaoAtual)}ler `;
        for (let argumento of expressao.argumentos) {
            this.formatarDeclaracaoOuConstruto(argumento);
            this.codigoFormatado += `, `;
        }
        if (expressao.argumentos.length > 0) {
            this.codigoFormatado = this.codigoFormatado.slice(0, -2);
        }
        this.codigoFormatado += `${this.quebraLinha}`;
    }
    visitarExpressaoLiteral(expressao) {
        if (typeof expressao.valor === 'string') {
            this.codigoFormatado += `"${expressao.valor}"`;
            return;
        }
        if (typeof expressao.valor === 'boolean') {
            switch (expressao.valor) {
                case true:
                    this.codigoFormatado += 'verdadeiro';
                    break;
                default:
                    this.codigoFormatado += 'falso';
                    break;
            }
            return;
        }
        this.codigoFormatado += `${expressao.valor}`;
    }
    visitarExpressaoLogica(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoRetornar(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoSuper(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoSustar(declaracao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoTupla(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoTipoDe(expressao) {
        throw new Error('Método não implementado.');
    }
    visitarExpressaoUnaria(expressao) {
        let operador;
        switch (expressao.operador.tipo) {
            case lexico_regular_1.default.SUBTRACAO:
                operador = `-`;
                break;
            case lexico_regular_1.default.ADICAO:
                operador = `+`;
                break;
            case lexico_regular_1.default.NEGACAO:
                operador = `nao `;
        }
        switch (expressao.incidenciaOperador) {
            case 'ANTES':
                this.codigoFormatado += operador;
                this.formatarDeclaracaoOuConstruto(expressao.operando);
                break;
            case 'DEPOIS':
                this.formatarDeclaracaoOuConstruto(expressao.operando);
                this.codigoFormatado += operador;
                break;
        }
    }
    visitarExpressaoVetor(expressao) {
        throw new Error('Método não implementado.');
    }
    formatarDeclaracaoOuConstruto(declaracaoOuConstruto) {
        switch (declaracaoOuConstruto.constructor.name) {
            case 'Atribuir':
                this.visitarExpressaoDeAtribuicao(declaracaoOuConstruto);
                break;
            case 'Binario':
                this.visitarExpressaoBinaria(declaracaoOuConstruto);
                break;
            case 'Comentario':
                this.visitarDeclaracaoComentario(declaracaoOuConstruto);
                break;
            case 'InicioAlgoritmo':
                this.visitarDeclaracaoInicioAlgoritmo(declaracaoOuConstruto);
                break;
            case 'Literal':
                this.visitarExpressaoLiteral(declaracaoOuConstruto);
                break;
            case 'Var':
                this.visitarDeclaracaoVar(declaracaoOuConstruto);
                break;
            case 'Variavel':
                this.visitarExpressaoDeVariavel(declaracaoOuConstruto);
                break;
            case 'Escreva':
                this.visitarDeclaracaoEscreva(declaracaoOuConstruto);
                break;
            case 'FormatacaoEscrita':
                this.visitarExpressaoFormatacaoEscrita(declaracaoOuConstruto);
                break;
            case 'Leia':
                this.visitarExpressaoLeia(declaracaoOuConstruto);
                break;
            case 'Se':
                this.visitarDeclaracaoSe(declaracaoOuConstruto);
                break;
            case 'Bloco':
                this.visitarExpressaoBloco(declaracaoOuConstruto);
                break;
            case 'Unario':
                this.visitarExpressaoUnaria(declaracaoOuConstruto);
                break;
            case 'Para':
                this.visitarDeclaracaoPara(declaracaoOuConstruto);
                break;
            case 'Enquanto':
                this.visitarDeclaracaoEnquanto(declaracaoOuConstruto);
                break;
            case 'Fazer':
                this.visitarDeclaracaoFazer(declaracaoOuConstruto);
                break;
            case 'Agrupamento':
                this.visitarExpressaoAgrupamento(declaracaoOuConstruto);
                break;
            case 'AtribuicaoPorIndice':
                this.visitarExpressaoAtribuicaoPorIndice(declaracaoOuConstruto);
                break;
            case 'AcessoIndiceVariavel':
                this.visitarExpressaoAcessoIndiceVariavel(declaracaoOuConstruto);
                break;
            case 'FimPara':
                this.visitarExpressaoFimPara(declaracaoOuConstruto);
                break;
            default:
                console.log(declaracaoOuConstruto.constructor.name);
                break;
        }
    }
    formatarBlocoOuVetorDeclaracoes(declaracoes) {
        this.indentacaoAtual += this.tamanhoIndentacao;
        this.pilhaEscoposFormatacao.empilharDeclaracoes(declaracoes);
        for (let declaracaoBloco of declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracaoBloco);
            this.pilhaEscoposFormatacao.topoDaPilha().declaracaoAtual++;
        }
        this.pilhaEscoposFormatacao.removerUltimo();
        this.indentacaoAtual -= this.tamanhoIndentacao;
    }
    formatar(declaracoes) {
        this.pilhaEscoposFormatacao = new pilha_escopos_formatacao_1.PilhaEscoposFormatacao();
        this.pilhaEscoposFormatacao.empilharDeclaracoes(declaracoes);
        const escopoInicialFormatacao = this.pilhaEscoposFormatacao.topoDaPilha();
        this.indentacaoAtual = 0;
        this.codigoFormatado = `variaveis ${this.quebraLinha}`;
        this.devePularLinha = true;
        this.deveIndentar = true;
        this.indentacaoAtual += this.tamanhoIndentacao;
        for (let declaracao of declaracoes) {
            this.formatarDeclaracaoOuConstruto(declaracao);
            escopoInicialFormatacao.declaracaoAtual++;
        }
        this.indentacaoAtual -= this.tamanhoIndentacao;
        this.codigoFormatado += `fim${this.quebraLinha}`;
        return this.codigoFormatado;
    }
}
exports.FormatadorMapler = FormatadorMapler;
//# sourceMappingURL=formatador-mapler.js.map