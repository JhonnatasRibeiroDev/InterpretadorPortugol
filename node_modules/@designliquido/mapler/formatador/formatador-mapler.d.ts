import { Aleatorio, CabecalhoPrograma, Classe, Comentario, Const, ConstMultiplo, Expressao, FuncaoDeclaracao, Enquanto, Escolha, Escreva, EscrevaMesmaLinha, Fazer, Importar, InicioAlgoritmo, Para, ParaCada, Se, TendoComo, Tente, Var, VarMultiplo, Atribuir, AcessoIndiceVariavel, AcessoElementoMatriz, AcessoMetodoOuPropriedade, Agrupamento, AtribuicaoPorIndice, AtribuicaoPorIndicesMatriz, Binario, Bloco, Continua, Chamada, DefinirValor, FuncaoConstruto, Variavel, Dicionario, ExpressaoRegular, Falhar, FimPara, FormatacaoEscrita, Isto, Leia, Literal, Logico, Retorna, Super, Sustar, Tupla, TipoDe, Unario, Vetor, Declaracao, Construto, AcessoMetodo, AcessoPropriedade, ArgumentoReferenciaFuncao, ReferenciaFuncao } from '@designliquido/delegua';
import { VisitanteComumInterface } from '@designliquido/delegua/interfaces';
import { ContinuarQuebra, RetornoQuebra, SustarQuebra } from '@designliquido/delegua/quebras';
import { PilhaEscoposFormatacao } from './pilha-escopos-formatacao';
export declare class FormatadorMapler implements VisitanteComumInterface {
    pilhaEscoposFormatacao: PilhaEscoposFormatacao;
    eEstruturaPara: boolean;
    indentacaoAtual: number;
    quebraLinha: string;
    tamanhoIndentacao: number;
    codigoFormatado: string;
    devePularLinha: boolean;
    deveIndentar: boolean;
    constructor(quebraLinha: string, tamanhoIndentacao?: number);
    visitarExpressaoFuncaoConstruto(expressao: FuncaoConstruto): Promise<any> | void;
    visitarExpressaoArgumentoReferenciaFuncao(expressao: ArgumentoReferenciaFuncao): Promise<any> | void;
    visitarExpressaoReferenciaFuncao(expressao: ReferenciaFuncao): Promise<any> | void;
    visitarExpressaoAcessoMetodo(expressao: AcessoMetodo): Promise<any> | void;
    visitarExpressaoAcessoPropriedade(expressao: AcessoPropriedade): Promise<any> | void;
    visitarDeclaracaoAleatorio(declaracao: Aleatorio): Promise<any>;
    visitarDeclaracaoCabecalhoPrograma(declaracao: CabecalhoPrograma): Promise<any>;
    visitarDeclaracaoClasse(declaracao: Classe): void | Promise<any>;
    visitarDeclaracaoComentario(declaracao: Comentario): void;
    visitarDeclaracaoConst(declaracao: Const): Promise<any>;
    visitarDeclaracaoConstMultiplo(declaracao: ConstMultiplo): Promise<any>;
    visitarDeclaracaoDeExpressao(declaracao: Expressao): void | Promise<any>;
    visitarDeclaracaoDefinicaoFuncao(declaracao: FuncaoDeclaracao): void;
    visitarDeclaracaoEnquanto(declaracao: Enquanto): void;
    visitarDeclaracaoEscolha(declaracao: Escolha): void | Promise<any>;
    visitarDeclaracaoEscreva(declaracao: Escreva): void | Promise<any>;
    visitarDeclaracaoEscrevaMesmaLinha(declaracao: EscrevaMesmaLinha): void | Promise<any>;
    visitarDeclaracaoFazer(declaracao: Fazer): void;
    visitarDeclaracaoImportar(declaracao: Importar): void | Promise<any>;
    visitarDeclaracaoInicioAlgoritmo(declaracao: InicioAlgoritmo): any;
    visitarDeclaracaoPara(declaracao: Para): any;
    visitarDeclaracaoParaCada(declaracao: ParaCada): Promise<any>;
    visitarDeclaracaoSe(declaracao: Se): void;
    visitarDeclaracaoTendoComo(declaracao: TendoComo): void | Promise<any>;
    visitarDeclaracaoTente(declaracao: Tente): void | Promise<any>;
    visitarDeclaracaoVar(declaracao: Var): any;
    visitarDeclaracaoVarMultiplo(declaracao: VarMultiplo): Promise<any>;
    visitarExpressaoDeAtribuicao(expressao: Atribuir<string>): void | Promise<any>;
    visitarExpressaoAcessoIndiceVariavel(expressao: AcessoIndiceVariavel<string>): void | Promise<any>;
    visitarExpressaoAcessoElementoMatriz(expressao: AcessoElementoMatriz<string>): void | Promise<any>;
    visitarExpressaoAcessoMetodoOuPropriedade(expressao: AcessoMetodoOuPropriedade<string>): void | Promise<any>;
    visitarExpressaoAgrupamento(expressao: Agrupamento): any;
    visitarExpressaoAtribuicaoPorIndice(expressao: AtribuicaoPorIndice): any;
    visitarExpressaoAtribuicaoPorIndicesMatriz(expressao: AtribuicaoPorIndicesMatriz): Promise<any>;
    visitarExpressaoBinaria(expressao: Binario): void;
    visitarExpressaoBloco(declaracao: Bloco): any;
    visitarExpressaoContinua(declaracao?: Continua): ContinuarQuebra;
    visitarExpressaoDeChamada(expressao: Chamada): void | Promise<any>;
    visitarExpressaoDefinirValor(expressao: DefinirValor<string>): void | Promise<any>;
    visitarExpressaoDeleguaFuncao(expressao: FuncaoConstruto): void | Promise<any>;
    visitarExpressaoDeVariavel(expressao: Variavel): void;
    visitarExpressaoDicionario(expressao: Dicionario): void | Promise<any>;
    visitarExpressaoExpressaoRegular(expressao: ExpressaoRegular<string>): Promise<RegExp>;
    visitarExpressaoFalhar(expressao: Falhar): Promise<any>;
    visitarExpressaoFimPara(declaracao: FimPara): any;
    visitarExpressaoFormatacaoEscrita(declaracao: FormatacaoEscrita): void | Promise<any>;
    visitarExpressaoIsto(expressao: Isto): void | Promise<any>;
    visitarExpressaoLeia(expressao: Leia): any;
    visitarExpressaoLiteral(expressao: Literal): any;
    visitarExpressaoLogica(expressao: Logico<string>): void | Promise<any>;
    visitarExpressaoRetornar(declaracao: Retorna): Promise<RetornoQuebra>;
    visitarExpressaoSuper(expressao: Super<string>): void | Promise<any>;
    visitarExpressaoSustar(declaracao?: Sustar): SustarQuebra;
    visitarExpressaoTupla(expressao: Tupla): Promise<any>;
    visitarExpressaoTipoDe(expressao: TipoDe<string>): Promise<any>;
    visitarExpressaoUnaria(expressao: Unario): void;
    visitarExpressaoVetor(expressao: Vetor): void | Promise<any>;
    formatarDeclaracaoOuConstruto(declaracaoOuConstruto: Declaracao | Construto): void;
    private formatarBlocoOuVetorDeclaracoes;
    formatar(declaracoes: Declaracao[]): string;
}
//# sourceMappingURL=formatador-mapler.d.ts.map