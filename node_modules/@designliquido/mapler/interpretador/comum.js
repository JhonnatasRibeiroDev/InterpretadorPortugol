"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitarExpressaoBinaria = visitarExpressaoBinaria;
exports.visitarDeclaracaoEscrevaMesmaLinha = visitarDeclaracaoEscrevaMesmaLinha;
exports.visitarDeclaracaoEscreva = visitarDeclaracaoEscreva;
const excecoes_1 = require("@designliquido/delegua/excecoes");
const inferenciador_1 = require("@designliquido/delegua/inferenciador");
const lexico_regular_1 = __importDefault(require("../tipos-de-simbolos/lexico-regular"));
async function avaliar(visitante, expressao) {
    return await expressao.aceitar(visitante);
}
async function avaliarArgumentosEscrevaMapler(interpretador, argumentos) {
    let formatoTexto = '';
    for (const argumento of argumentos) {
        const resultadoAvaliacao = await interpretador.avaliar(argumento);
        let valor = (resultadoAvaliacao === null || resultadoAvaliacao === void 0 ? void 0 : resultadoAvaliacao.hasOwnProperty('valor')) ? resultadoAvaliacao.valor : resultadoAvaliacao;
        formatoTexto += `${interpretador.paraTexto(valor)}`;
    }
    return formatoTexto;
}
function eIgual(esquerda, direita) {
    if (esquerda === null && direita === null)
        return true;
    if (esquerda === null)
        return false;
    return esquerda === direita;
}
function eVerdadeiro(objeto) {
    if (objeto === null)
        return false;
    if (typeof objeto === 'boolean')
        return Boolean(objeto);
    if (objeto.hasOwnProperty('valor')) {
        return Boolean(objeto.valor);
    }
    return true;
}
function verificarOperandosNumeros(operador, direita, esquerda) {
    const tipoDireita = direita.tipo ? direita.tipo : typeof direita === 'number' ? 'número' : String(NaN);
    const tipoEsquerda = esquerda.tipo ? esquerda.tipo : typeof esquerda === 'number' ? 'número' : String(NaN);
    const tiposNumericos = ['inteiro', 'numero', 'número', 'real'];
    if (tiposNumericos.includes(tipoDireita.toLowerCase()) && tiposNumericos.includes(tipoEsquerda.toLowerCase()))
        return;
    throw new excecoes_1.ErroEmTempoDeExecucao(operador, 'Operadores precisam ser números.', operador.linha);
}
/**
 * Método de visita de expressão binária.
 * Reintroduzido pelas particularidades do VisuAlg.
 * @param expressao A expressão binária.
 * @returns O resultado da resolução da expressão.
 */
async function visitarExpressaoBinaria(visitante, expressao) {
    try {
        const esquerda = await avaliar(visitante, expressao.esquerda);
        const direita = await avaliar(visitante, expressao.direita);
        let valorEsquerdo = (esquerda === null || esquerda === void 0 ? void 0 : esquerda.hasOwnProperty('valor')) ? esquerda.valor : esquerda;
        let valorDireito = (direita === null || direita === void 0 ? void 0 : direita.hasOwnProperty('valor')) ? direita.valor : direita;
        // No VisuAlg, uma variável pode resolver para função porque funções não precisam ter parênteses.
        // Esta parte evita o problema.
        if (valorEsquerdo && valorEsquerdo.hasOwnProperty('funcao')) {
            valorEsquerdo = valorEsquerdo.funcao();
        }
        if (valorDireito && valorDireito.hasOwnProperty('funcao')) {
            valorDireito = valorDireito.funcao();
        }
        const tipoEsquerdo = (esquerda === null || esquerda === void 0 ? void 0 : esquerda.hasOwnProperty('tipo')) ? esquerda.tipo : (0, inferenciador_1.inferirTipoVariavel)(esquerda);
        const tipoDireito = (direita === null || direita === void 0 ? void 0 : direita.hasOwnProperty('tipo')) ? direita.tipo : (0, inferenciador_1.inferirTipoVariavel)(direita);
        switch (expressao.operador.tipo) {
            case lexico_regular_1.default.MAIOR:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) > Number(valorDireito);
            case lexico_regular_1.default.MAIOR_IGUAL:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) >= Number(valorDireito);
            case lexico_regular_1.default.MENOR:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) < Number(valorDireito);
            case lexico_regular_1.default.MENOR_IGUAL:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) <= Number(valorDireito);
            case lexico_regular_1.default.SUBTRACAO:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) - Number(valorDireito);
            case lexico_regular_1.default.ADICAO:
                if (tipoEsquerdo === 'número' && tipoDireito === 'número') {
                    return Number(valorEsquerdo) + Number(valorDireito);
                }
                else {
                    return String(valorEsquerdo) + String(valorDireito);
                }
            case lexico_regular_1.default.DIVISAO:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) / Number(valorDireito);
            case lexico_regular_1.default.MULTIPLICACAO:
                if (tipoEsquerdo === 'texto' || tipoDireito === 'texto') {
                    // Sem ambos os valores resolvem como texto, multiplica normal.
                    // Se apenas um resolve como texto, o outro repete o
                    // texto n vezes, sendo n o valor do outro.
                    if (tipoEsquerdo === 'texto' && tipoDireito === 'texto') {
                        return Number(valorEsquerdo) * Number(valorDireito);
                    }
                    if (tipoEsquerdo === 'texto') {
                        return valorEsquerdo.repeat(Number(valorDireito));
                    }
                    return valorDireito.repeat(Number(valorEsquerdo));
                }
                return Number(valorEsquerdo) * Number(valorDireito);
            case lexico_regular_1.default.MODULO:
                verificarOperandosNumeros(expressao.operador, esquerda, direita);
                return Number(valorEsquerdo) % Number(valorDireito);
            case lexico_regular_1.default.DIFERENTE:
                return !eIgual(valorEsquerdo, valorDireito);
            case lexico_regular_1.default.IGUAL:
                return eIgual(valorEsquerdo, valorDireito);
        }
    }
    catch (erro) {
        return Promise.reject(erro);
    }
}
/**
 * Execução de uma escrita na saída padrão, sem quebras de linha.
 * Implementada para alguns dialetos, como Mapler.
 *
 * Como `readline.question` sobrescreve o que foi escrito antes, aqui
 * definimos `this.mensagemPrompt` para uso com `leia`.
 * No Mapler é muito comum usar `escreva()` seguido de `leia()` para
 * gerar um prompt na mesma linha.
 * @param declaracao A declaração.
 * @returns Sempre nulo, por convenção de visita.
 */
async function visitarDeclaracaoEscrevaMesmaLinha(interpretador, declaracao) {
    try {
        const formatoTexto = await avaliarArgumentosEscrevaMapler(interpretador, declaracao.argumentos);
        this.mensagemPrompt = formatoTexto;
        interpretador.funcaoDeRetornoMesmaLinha(formatoTexto);
        return null;
    }
    catch (erro) {
        interpretador.erros.push(erro);
    }
}
/**
 * Execução de uma escrita na saída configurada, que pode ser `console` (padrão) ou
 * alguma função para escrever numa página Web.
 * @param declaracao A declaração.
 * @returns Sempre nulo, por convenção de visita.
 */
async function visitarDeclaracaoEscreva(interpretador, declaracao) {
    try {
        const formatoTexto = await avaliarArgumentosEscrevaMapler(interpretador, declaracao.argumentos);
        interpretador.funcaoDeRetorno(formatoTexto);
        return null;
    }
    catch (erro) {
        interpretador.erros.push(erro);
    }
}
//# sourceMappingURL=comum.js.map