"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpretadorBirlComDepuracao = void 0;
const interpretador_com_depuracao_1 = require("@designliquido/delegua/interpretador/interpretador-com-depuracao");
const comum = __importStar(require("./comum"));
const quebras_1 = require("@designliquido/delegua/quebras");
class InterpretadorBirlComDepuracao extends interpretador_com_depuracao_1.InterpretadorComDepuracao {
    constructor(diretorioBase, funcaoDeRetorno = null, funcaoDeRetornoMesmaLinha = null) {
        super(diretorioBase, funcaoDeRetorno, funcaoDeRetornoMesmaLinha);
    }
    async atribuirVariavel(interpretador, expressao, valor, tipo) {
        return comum.atribuirVariavel(interpretador, expressao, valor, tipo);
    }
    async resolverQuantidadeDeInterpolacoes(expressao) {
        return comum.resolverQuantidadeDeInterpolacoes(expressao);
    }
    async verificarTipoDaInterpolacao(dados) {
        return comum.verificarTipoDaInterpolacao(dados);
    }
    async substituirValor(stringOriginal, novoValor, simboloTipo) {
        return comum.substituirValor(stringOriginal, novoValor, simboloTipo);
    }
    /**
     * Execução da leitura de valores da entrada configurada no
     * início da aplicação.
     * @param expressao Expressão do tipo Leia
     * @returns Promise com o resultado da leitura.
     */
    async visitarExpressaoLeia(expressao) {
        await comum.visitarExpressaoLeia(this, expressao);
    }
    async visitarExpressaoLiteral(expressao) {
        return comum.visitarExpressaoLiteral(expressao);
    }
    async visitarDeclaracaoPara(declaracao) {
        return comum.visitarDeclaracaoPara(this, declaracao);
    }
    /**
     * Ao executar um retorno, manter o valor retornado no Interpretador para
     * uso por linhas que foram executadas com o comando `próximo` do depurador.
     * @param declaracao Uma declaracao Retorna
     * @returns O resultado da execução da visita.
     */
    async visitarExpressaoRetornar(declaracao) {
        let valor = null;
        if (declaracao.valor != null)
            valor = await this.avaliar(declaracao.valor);
        const retorno = new quebras_1.RetornoQuebra(valor);
        // O escopo atual é marcado como finalizado, para notificar a
        // instrução de que deve ser descartado.
        const escopoAtual = this.pilhaEscoposExecucao.topoDaPilha();
        escopoAtual.finalizado = true;
        // Acha o primeiro escopo de função.
        const escopoFuncao = this.pilhaEscoposExecucao.obterEscopoPorTipo('funcao');
        if (escopoFuncao && escopoFuncao.idChamada !== undefined) {
            escopoAtual.ambiente.resolucoesChamadas[escopoFuncao.idChamada] =
                retorno && retorno.hasOwnProperty('valor') ? retorno.valor : retorno;
        }
        return retorno;
    }
    async avaliarArgumentosEscreva(argumentos) {
        return comum.avaliarArgumentosEscreva(this, argumentos);
    }
    async interpretar(declaracoes, manterAmbiente) {
        return comum.interpretar(this, declaracoes, manterAmbiente);
    }
}
exports.InterpretadorBirlComDepuracao = InterpretadorBirlComDepuracao;
//# sourceMappingURL=interpretador-birl-com-depuracao.js.map