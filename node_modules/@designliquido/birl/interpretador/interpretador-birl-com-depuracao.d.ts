import { Construto, Literal } from '@designliquido/delegua/construtos';
import { Declaracao, Leia, Para, Retorna } from '@designliquido/delegua/declaracoes';
import { RetornoInterpretador } from '@designliquido/delegua/interfaces/retornos';
import { InterpretadorComDepuracao } from '@designliquido/delegua/interpretador/interpretador-com-depuracao';
import { InterpretadorInterface } from '@designliquido/delegua';
import { RetornoQuebra } from '@designliquido/delegua/quebras';
export declare class InterpretadorBirlComDepuracao extends InterpretadorComDepuracao {
    constructor(diretorioBase: string, funcaoDeRetorno?: Function, funcaoDeRetornoMesmaLinha?: Function);
    atribuirVariavel(interpretador: InterpretadorInterface, expressao: Construto, valor: any, tipo: string): Promise<any>;
    resolverQuantidadeDeInterpolacoes(expressao: Literal): Promise<RegExpMatchArray>;
    verificarTipoDaInterpolacao(dados: {
        tipo: string;
        valor: any;
    }): Promise<boolean>;
    substituirValor(stringOriginal: string, novoValor: any, simboloTipo: string): Promise<string>;
    /**
     * Execução da leitura de valores da entrada configurada no
     * início da aplicação.
     * @param expressao Expressão do tipo Leia
     * @returns Promise com o resultado da leitura.
     */
    visitarExpressaoLeia(expressao: Leia): Promise<any>;
    visitarExpressaoLiteral(expressao: Literal): Promise<any>;
    visitarDeclaracaoPara(declaracao: Para): Promise<any>;
    /**
     * Ao executar um retorno, manter o valor retornado no Interpretador para
     * uso por linhas que foram executadas com o comando `próximo` do depurador.
     * @param declaracao Uma declaracao Retorna
     * @returns O resultado da execução da visita.
     */
    visitarExpressaoRetornar(declaracao: Retorna): Promise<RetornoQuebra>;
    avaliarArgumentosEscreva(argumentos: Construto[]): Promise<string>;
    interpretar(declaracoes: Declaracao[], manterAmbiente?: boolean): Promise<RetornoInterpretador>;
}
//# sourceMappingURL=interpretador-birl-com-depuracao.d.ts.map