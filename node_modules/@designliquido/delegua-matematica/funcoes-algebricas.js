"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exp = exp;
exports.logaritmo = logaritmo;
exports.potencia = potencia;
exports.aleatorio = aleatorio;
exports.raizQuadrada = raizQuadrada;
const excecoes_1 = require("./excecoes");
/**
 * Retorna a constante de Euler elevada ao valor passado por parâmetro.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} valor A potência a elevar a constante e
 * @returns Valor da constante e elevado à potência
 */
function exp(_, valor) {
    return Math.exp(valor);
}
/**
 * Calcula o logaritmo natural.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} valor Número a ser calculado.
 * @returns O logaritmo do número.
 */
function logaritmo(_, valor) {
    return Math.log(valor);
}
/**
 * Faz a exponenciação de uma base a determinado expoente.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} base O valor da base.
 * @param {number} expoente O valor do expoente.
 * @returns O cálculo da exponenciação.
 */
function potencia(_, base, expoente) {
    return Math.pow(base, expoente);
}
/**
 * Gera e retorna um valor aleatório.
 * @returns Valor aleatório
 */
function aleatorio() {
    return Math.random();
}
/**
 * Calcula a raiz quadrada.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} valor Um número para aplicar a radiciação.
 * @returns O valor da radiciação.
 */
function raizQuadrada(_, valor) {
    if (valor === null || valor === undefined) {
        throw new excecoes_1.MatematicaErroEmTempoDeExecucao(undefined, `Valor para raizQuadrada() inválido.`);
    }
    return Math.sqrt(valor);
}
//# sourceMappingURL=funcoes-algebricas.js.map