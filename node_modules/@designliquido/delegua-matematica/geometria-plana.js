"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.areaCirculo = areaCirculo;
exports.areaQuadrado = areaQuadrado;
exports.areaRetangulo = areaRetangulo;
exports.areaLosango = areaLosango;
exports.areaTrapezio = areaTrapezio;
exports.areaTriangulo = areaTriangulo;
exports.distanciaDoisPontos = distanciaDoisPontos;
exports.pontoMedio = pontoMedio;
const funcoes_algebricas_1 = require("./funcoes-algebricas");
/**
 * Função da área do círculo.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} raio Raio do circulo.
 * @returns A área do círculo.
 */
function areaCirculo(_, raio) {
    return (Math.PI * raio * raio * 100) / 100;
}
/**
 * Função da área do quadrado.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} lado Lado do quadrado.
 * @returns A área do quadrado.
 */
function areaQuadrado(_, lado) {
    return lado * lado;
}
/**
 * Função da área do retângulo.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} ladoX Lado eixo x do retângulo.
 * @param {number} ladoY Lado eixo y do retângulo.
 * @returns A área do retângulo.
 */
function areaRetangulo(_, ladoX, ladoY) {
    return ladoX * ladoY;
}
/**
 * Função da área do losango.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} diagonalMaior Lado eixo x do losango.
 * @param {number} diagonalMenor Lado eixo y do losango.
 * @returns A área do losango.
 */
function areaLosango(_, diagonalMaior, diagonalMenor) {
    return (diagonalMaior * diagonalMenor) / 2;
}
/**
 * Função da área do trapézio.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} baseMaior Base maior do trapézio.
 * @param {number} baseMenor Base menor do trapézio.
 * @param {number} altura Altura do trapézio.
 * @returns A área do trapézio.
 */
function areaTrapezio(_, baseMaior, baseMenor, altura) {
    return ((baseMaior + baseMenor) * altura) / 2;
}
/**
 * Função da área do triângulo.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} base Base do triângulo.
 * @param {number} altura Altura do triângulo.
 * @returns A área do triângulo.
 */
function areaTriangulo(_, base, altura) {
    return (base * altura) / 2;
}
/**
 * Função distância entre 2 pontos.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} x1 x inicial.
 * @param {number} x2 x final.
 * @param {number} y1 y inicial.
 * @param {number} y2 y final.
 * @returns A distância entre os dois pontos.
 */
function distanciaDoisPontos(_, x1, x2, y1, y2) {
    const x = (0, funcoes_algebricas_1.potencia)(_, x2, 2) - 2 * x2 * x1 + (0, funcoes_algebricas_1.potencia)(_, x1, 2);
    const y = (0, funcoes_algebricas_1.potencia)(_, y2, 2) - 2 * y2 * y1 + (0, funcoes_algebricas_1.potencia)(_, y1, 2);
    return (0, funcoes_algebricas_1.raizQuadrada)(_, x + y);
}
/**
 * Função do ponto médio.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} x1 x inicial.
 * @param {number} x2 x final.
 * @param {number} y1 y inicial.
 * @param {number} y2 y final.
 * @returns Uma lista contendo o ponto médio de x e y respectivamente.
 */
function pontoMedio(_, x1, x2, y1, y2) {
    const xm = (x2 + x1) / 2;
    const ym = (y2 + y1) / 2;
    return [xm, ym];
}
//# sourceMappingURL=geometria-plana.js.map