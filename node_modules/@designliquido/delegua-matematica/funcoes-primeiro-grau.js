"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fun1 = fun1;
exports.fun1R = fun1R;
exports.fun2 = fun2;
exports.xVertice = xVertice;
exports.yVertice = yVertice;
exports.fun2R = fun2R;
exports.linspace = linspace;
const funcoes_algebricas_1 = require("./funcoes-algebricas");
/**
 * Retorna o desenho da função afim.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} a O valor de a.
 * @param {number} b O valor de b.
 * @returns O desenho da função afim.
 */
function fun1(_, a, b) {
    const x = [b - 4, b - 3, b - 2, b - 1, b, b + 1, b + 2, b + 3, b + 4];
    const f = x.map(function (x) {
        return x * a + b;
    });
    return ["f(x) =" + f];
}
/**
 * Calcula a raiz da função afim.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} a O valor de a.
 * @param {number} b O valor de b.
 * @returns A raiz da função afim.
 */
function fun1R(_, a, b) {
    return (-1 * b) / a;
}
/**
 * Retorna o desenho da função quadrática.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} a O valor de a.
 * @param {number} b O valor de b.
 * @param {number} c O valor de c.
 * @returns O desenho da função quadrática.
 */
function fun2(_, a, b, c) {
    const n = 2.5;
    var vetor = [];
    var passo = (n - -n) / (n - 1);
    for (var i = 0; i < n; i = i + 0.01) {
        vetor.push(-n - 1.945 + passo * i);
    }
    const x = vetor;
    const f = x.map(function (x) {
        return x * x * a + b * x + c;
    });
    return f;
}
/**
 * Calcula x do vértice.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} a O valor de a.
 * @param {number} b O valor de b.
 * @param {number} c O valor de c.
 * @returns As raízes da função quadrática.
 */
function xVertice(_, a, b, c) {
    const xVertice = (-1 * b) / (2 * a);
    return xVertice;
}
/**
 * Calcula y do vértice.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} a O valor de a.
 * @param {number} b O valor de b.
 * @param {number} c O valor de c.
 * @returns As raízes da função quadrática.
 */
function yVertice(_, a, b, c) {
    const yVertice = ((-1 * (Math.pow(b, 2) - 4 * a * c)) / 4) * a;
    return yVertice;
}
/**
 * Calcula as raízes da função quadrática.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} a O valor de a.
 * @param {number} b O valor de b.
 * @param {number} c O valor de c.
 * @returns As raizes da função quadrática.
 */
function fun2R(_, a, b, c) {
    const r1 = (-1 * b + (0, funcoes_algebricas_1.raizQuadrada)(_, b ** 2 - 4 * a * c)) / (2 * a);
    const r2 = (-1 * b - (0, funcoes_algebricas_1.raizQuadrada)(_, b ** 2 - 4 * a * c)) / (2 * a);
    return [r1, r2];
}
/**
 * Preenche um intervalo entre dois números dada uma cardinalidade.
 * @param {any} _ O visitante da instrução, normalmente um interpretador.
 * @param {number} valorInicial O valor inicial.
 * @param {number} valorDeParada O valor de parada.
 * @param {number} cardinalidade A cardinalidade.
 * @returns
 */
function linspace(_, valorInicial, valorDeParada, cardinalidade) {
    const lista = [];
    const passo = (valorDeParada - valorInicial) / (cardinalidade - 1);
    for (var i = 0; i < cardinalidade; i++) {
        lista.push(valorInicial + passo * i);
    }
    return lista;
}
//# sourceMappingURL=funcoes-primeiro-grau.js.map